import React, { useCallback, useState, useEffect } from 'react';
import { Edge, Node } from '@xyflow/react';
import '@xyflow/react/dist/style.css';

import { useJobDiagramCore } from '@/hooks/useJobDiagramCore';
import { useJobDiagramSave } from '@/hooks/useJobDiagramSave';
import { useExtrasOnLocation } from '@/hooks/useExtrasOnLocation';
import { useWellConfiguration } from '@/hooks/useWellConfiguration';
import { useJobDiagramActions } from '@/hooks/useJobDiagramActions';
import { useJobDiagramEquipmentHandlers } from '@/hooks/useJobDiagramEquipmentHandlers';
import { useStarlinkCustomerComputerHandlers } from '@/hooks/useStarlinkCustomerComputerHandlers';
import { useRobustEquipmentTracking } from '@/hooks/useRobustEquipmentTracking';
import { useEquipmentValidation } from '@/hooks/equipment/useEquipmentValidation';
import { useInventoryMapperSync } from '@/hooks/useInventoryMapperSync';
import { useEquipmentUsageAnalyzer } from '@/hooks/equipment/useEquipmentUsageAnalyzer';
import { useEdgeMigration } from '@/hooks/useEdgeMigration';
import { useNodeDeletion } from '@/hooks/useNodeDeletion';
import { useAllocatedEquipment } from '@/hooks/equipment/useAllocatedEquipment';
import { JobDiagram as JobDiagramType } from '@/hooks/useJobs';
import { useInventory } from '@/contexts/InventoryContext';
import { useIsMobile } from '@/hooks/use-mobile';

// Import components
import JobDiagramSidebar from '@/components/diagram/JobDiagramSidebar';
import JobDiagramCanvas from '@/components/diagram/JobDiagramCanvas';
import FloatingDiagramControls from '@/components/diagram/FloatingDiagramControls';
import { Sheet, SheetContent, SheetTrigger, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Camera, Package, AlertTriangle, Menu, ChevronLeft, Settings, Users } from 'lucide-react';
import JobPhotoPanel from '@/components/diagram/JobPhotoPanel';
import CompactJobEquipmentPanel from '@/components/diagram/CompactJobEquipmentPanel';
import EquipmentAllocationPanel from '@/components/diagram/EquipmentAllocationPanel';
import CableAllocationDialog from '@/components/diagram/CableAllocationDialog';
import NodeEquipmentAllocationDialog from '@/components/diagram/NodeEquipmentAllocationDialog';
import { YAdapterAllocationDialog } from '@/components/diagram/YAdapterAllocationDialog';
import { JobContactsPanel } from '@/components/diagram/JobContactsPanel';
import { cn } from '@/lib/utils';

interface JobDiagramProps {
  job: JobDiagramType;
}

const JobDiagram: React.FC<JobDiagramProps> = ({ job }) => {
  const { data: inventoryData } = useInventory();
  const isMobile = useIsMobile();
  
  // State management
  const [isPhotosPanelOpen, setIsPhotosPanelOpen] = useState(false);
  const [isEquipmentPanelOpen, setIsEquipmentPanelOpen] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isAllocationPanelOpen, setIsAllocationPanelOpen] = useState(false);
  const [cableAllocationDialog, setCableAllocationDialog] = useState<{ isOpen: boolean; edge: Edge | null }>({ isOpen: false, edge: null });
  const [nodeAllocationDialog, setNodeAllocationDialog] = useState<{ isOpen: boolean; node: Node | null; nodeType?: string; position?: { x: number; y: number } }>({ isOpen: false, node: null });
  const [yAdapterDialogOpen, setYAdapterDialogOpen] = useState(false);
  const [mobileActionSheet, setMobileActionSheet] = useState(false);

  // Initialize inventory mapper sync
  const {
    isValidating: isSyncValidating,
    conflicts,
    allocations,
    validateEquipmentAvailability,
    allocateEquipment,
    releaseEquipment,
    resolveConflict,
    syncInventoryStatus,
    getEquipmentStatus,
    getJobEquipment
  } = useInventoryMapperSync();

  const {
    reactFlowWrapper,
    nodes,
    setNodes,
    onNodesChange,
    edges,
    setEdges,
    onEdgesChange,
    onConnect,
    selectedCableType,
    setSelectedCableType,
    selectedShearstreamBoxes,
    setSelectedShearstreamBoxes,
    selectedStarlink,
    setSelectedStarlink,
    selectedCustomerComputers,
    setSelectedCustomerComputers,
    nodeIdCounter,
    setNodeIdCounter,
    isInitialized,
    setIsInitialized,
    initializeJob,
    mainBoxName,
    satelliteName,
    wellsideGaugeName,
    customerComputerNames,
    updateMainBoxName,
    updateCustomerComputerName,
    updateSatelliteName,
    updateWellsideGaugeName,
  } = useJobDiagramCore(job);

  // Initialize individual equipment allocation tracking
  const {
    allocatedEquipment,
    allocateEquipmentToNode,
    deallocateEquipmentFromNode,
    allocateCableToEdge,
    deallocateCableFromEdge,
    getAllocatedEquipmentSummary,
    isEquipmentAllocated,
    getAvailableEquipmentForType
  } = useAllocatedEquipment(job.id, nodes, edges);

  const {
    extrasOnLocation,
    handleAddExtra,
    handleRemoveExtra,
  } = useExtrasOnLocation();

  const { manualSave, immediateSave } = useJobDiagramSave({
    job,
    nodes,
    edges,
    isInitialized,
    mainBoxName,
    satelliteName,
    wellsideGaugeName,
    customerComputerNames,
    selectedCableType,
    selectedShearstreamBoxes,
    selectedStarlink,
    selectedCustomerComputers,
    extrasOnLocation,
  });

  // Equipment tracking and validation
  const {
    validateInventoryConsistency,
    analyzeEquipmentUsage,
  } = useRobustEquipmentTracking(job.id, nodes, edges);

  const { runFullValidation } = useEquipmentValidation();

  // Enhanced connection handler with immediate save for edge toggles
  const enhancedOnConnect = useCallback((connection: any) => {
    const sourceNode = nodes.find(node => node.id === connection.source);
    const targetNode = nodes.find(node => node.id === connection.target);
    
    if (!sourceNode || !targetNode) {
      return;
    }

    const isDirectConnection = (
      (sourceNode.type === 'satellite' && targetNode.type === 'mainBox') ||
      (sourceNode.type === 'mainBox' && targetNode.type === 'satellite') ||
      (sourceNode.type === 'satellite' && targetNode.type === 'shearstreamBox') ||
      (sourceNode.type === 'shearstreamBox' && targetNode.type === 'satellite')
    );

    if (isDirectConnection) {
      onConnect(connection);
      setTimeout(() => immediateSave(), 100);
    } else {
      const tempEdge: Edge = {
        id: `temp-edge-${Date.now()}`,
        source: connection.source,
        target: connection.target,
        sourceHandle: connection.sourceHandle,
        targetHandle: connection.targetHandle,
        type: 'cable',
        data: {
          cableTypeId: selectedCableType,
          tempConnection: true
        }
      };
      
      setCableAllocationDialog({ isOpen: true, edge: tempEdge });
    }
  }, [nodes, onConnect, immediateSave, selectedCableType]);

  // Enhanced edges change handler
  const enhancedOnEdgesChange = useCallback((changes: any[]) => {
    onEdgesChange(changes);
    
    const hasEdgeUpdate = changes.some(change => 
      change.type === 'reset' || 
      (change.type === 'replace' && change.item) ||
      (change.item && (change.item.type === 'direct' || change.item.data?.connectionType === 'direct'))
    );
    
    if (hasEdgeUpdate) {
      setTimeout(() => immediateSave(), 100);
    }
  }, [onEdgesChange, immediateSave]);

  // Enhanced nodes change handler
  const enhancedOnNodesChange = useCallback((changes: any[]) => {
    onNodesChange(changes);
    
    const hasMainBoxUpdate = changes.some(change => 
      change.type === 'reset' || 
      (change.item && change.item.type === 'mainBox')
    );
    
    if (hasMainBoxUpdate) {
      setTimeout(() => immediateSave(), 100);
    }
  }, [onNodesChange, immediateSave]);

  const {
    updateWellName,
    updateWellColor,
    updateWellsideGaugeColor,
    updateWellGaugeType,
  } = useWellConfiguration(setNodes);

  // Add diagram actions
  const {
    addYAdapter,
    addYAdapterWithEquipment,
    addShearstreamBox,
    addShearstreamBoxWithEquipment,
    removeShearstreamBox,
    addCustomerComputer,
    addCustomerComputerWithEquipment,
    clearDiagram,
    saveDiagram,
  } = useJobDiagramActions({
    job,
    nodeIdCounter,
    setNodeIdCounter,
    setNodes,
    setEdges,
    setIsInitialized,
    initializeJob,
    reactFlowWrapper,
    openYAdapterDialog: () => setYAdapterDialogOpen(true),
    openNodeEquipmentDialog: (nodeType: string, position: { x: number; y: number }) => {
      setNodeAllocationDialog({ isOpen: true, node: null, nodeType, position });
    },
  });

  // Equipment handlers
  const {
    handleEquipmentSelect,
    handleAddShearstreamBox,
    handleRemoveShearstreamBox,
  } = useJobDiagramEquipmentHandlers({
    job,
    selectedShearstreamBoxes,
    selectedStarlink,
    selectedCustomerComputers,
    setSelectedShearstreamBoxes,
    setSelectedStarlink,
    setSelectedCustomerComputers,
    setNodes,
    updateMainBoxName,
    updateSatelliteName,
    updateCustomerComputerName,
    addShearstreamBox,
    removeShearstreamBox,
    validateEquipmentAvailability,
    allocateEquipment,
    releaseEquipment,
    onSave: immediateSave,
  });

  // Starlink and Customer Computer handlers
  const {
    handleAddStarlink,
    handleRemoveStarlink,
    handleAddCustomerComputer: handleAddCustomerComputerWrapper,
    handleRemoveCustomerComputer,
  } = useStarlinkCustomerComputerHandlers({
    setNodes,
    nodeIdCounter,
    setNodeIdCounter,
  });

  // Get equipment usage analyzer
  const { analyzeEquipmentUsage: getEquipmentUsage } = useEquipmentUsageAnalyzer(nodes, edges);
  
  // Get edge migration hook
  const { migrateEdges } = useEdgeMigration();
  
  // Run edge migration once when component mounts
  React.useEffect(() => {
    if (isInitialized && edges.length > 0) {
      const needsMigration = edges.some(edge => 
        edge.data?.cableTypeId && ['1', '2', '3', '4'].includes(edge.data.cableTypeId)
      );
      
      if (needsMigration) {
        console.log('Detected edges with old cable type IDs, running migration...');
        migrateEdges(edges, setEdges);
        setTimeout(() => immediateSave(), 500);
      }
    }
  }, [isInitialized]);
  
  // Get equipment status for UI indicators
  const usage = getEquipmentUsage();
  const totalEquipmentRequired = Object.values(usage.cables).reduce((sum, cable) => sum + cable.quantity, 0) + 
                                usage.gauges + usage.adapters + usage.computers + usage.satellite;

  // Add node deletion handler
  const { onNodesDelete } = useNodeDeletion({
    nodes,
    edges,
    setNodes,
    setEdges,
    selectedShearstreamBoxes,
    selectedStarlink,
    selectedCustomerComputers,
    setSelectedShearstreamBoxes,
    setSelectedStarlink,
    setSelectedCustomerComputers,
    releaseEquipment,
    jobId: job.id,
    immediateSave,
  });

  // Equipment allocation handlers
  const handleAllocateEquipmentToNode = useCallback((nodeId: string) => {
    const node = nodes.find(n => n.id === nodeId);
    if (node) {
      setNodeAllocationDialog({ isOpen: true, node });
    }
  }, [nodes]);

  const handleConfirmNodeAllocation = useCallback(async (equipmentId: string) => {
    const { node, nodeType, position } = nodeAllocationDialog;
    
    if (node) {
      const success = await allocateEquipmentToNode(node.id, equipmentId);
      if (success) {
        setNodes(nodes => nodes.map(n => 
          n.id === node.id 
            ? { ...n, data: { ...n.data, allocatedEquipmentId: equipmentId, assigned: true } }
            : n
        ));
        immediateSave();
      }
    } else if (nodeType && position) {
      const equipment = inventoryData.individualEquipment.find(e => e.id === equipmentId);
      if (!equipment) return;
      
      if (nodeType === 'shearstreamBox') {
        addShearstreamBoxWithEquipment(equipmentId, equipment.equipmentId);
        setTimeout(() => {
          const newNodes = nodes.filter(n => n.type === 'mainBox');
          const newNodeId = `main-box-${newNodes.length}`;
          allocateEquipmentToNode(newNodeId, equipmentId);
        }, 100);
      } else if (nodeType === 'customerComputer') {
        const isTablet = equipment.typeId === 'customer-tablet';
        addCustomerComputerWithEquipment(equipmentId, equipment.equipmentId, isTablet);
        setTimeout(() => {
          const newNodes = nodes.filter(n => n.type === 'customerComputer');
          const newNodeId = `customer-computer-${newNodes.length}`;
          allocateEquipmentToNode(newNodeId, equipmentId);
        }, 100);
      }
    }
    
    setNodeAllocationDialog({ isOpen: false, node: null });
  }, [nodeAllocationDialog, allocateEquipmentToNode, setNodes, immediateSave, inventoryData, nodes, addShearstreamBoxWithEquipment, addCustomerComputerWithEquipment]);

  const handleDeallocateEquipmentFromNode = useCallback(async (nodeId: string) => {
    const success = await deallocateEquipmentFromNode(nodeId);
    if (success) {
      setNodes(nodes => nodes.map(node => 
        node.id === nodeId 
          ? { ...node, data: { ...node.data, allocatedEquipmentId: undefined } }
          : node
      ));
      immediateSave();
    }
  }, [deallocateEquipmentFromNode, setNodes, immediateSave]);

  const handleAllocateCableToEdge = useCallback((edgeId: string) => {
    const edge = edges.find(e => e.id === edgeId);
    if (edge) {
      setCableAllocationDialog({ isOpen: true, edge });
    }
  }, [edges]);

  const handleConfirmCableAllocation = useCallback(async (cableId: string) => {
    const edge = cableAllocationDialog.edge;
    if (!edge) return;

    if (edge.data?.tempConnection) {
      const connection = {
        source: edge.source,
        target: edge.target,
        sourceHandle: edge.sourceHandle,
        targetHandle: edge.targetHandle,
      };
      
      onConnect(connection);
      
      setTimeout(async () => {
        const newEdge = edges.find(e => 
          e.source === edge.source && 
          e.target === edge.target &&
          e.sourceHandle === edge.sourceHandle &&
          e.targetHandle === edge.targetHandle &&
          e.id !== edge.id
        );
        
        if (newEdge) {
          const success = await allocateCableToEdge(newEdge.id, cableId);
          if (success) {
            setEdges(edges => edges.map(e => 
              e.id === newEdge.id 
                ? { ...e, data: { ...e.data, allocatedEquipmentId: cableId } }
                : e
            ));
            immediateSave();
          }
        }
      }, 100);
    } else {
      const success = await allocateCableToEdge(edge.id, cableId);
      if (success) {
        setEdges(edges => edges.map(e => 
          e.id === edge.id 
            ? { ...e, data: { ...e.data, allocatedEquipmentId: cableId } }
            : e
        ));
        immediateSave();
      }
    }
    setCableAllocationDialog({ isOpen: false, edge: null });
  }, [cableAllocationDialog.edge, allocateCableToEdge, setEdges, immediateSave, onConnect, edges]);

  const handleDeallocateCableFromEdge = useCallback(async (edgeId: string) => {
    const success = await deallocateCableFromEdge(edgeId);
    if (success) {
      setEdges(edges => edges.map(edge => 
        edge.id === edgeId 
          ? { ...edge, data: { ...edge.data, allocatedEquipmentId: undefined } }
          : edge
      ));
      immediateSave();
    }
  }, [deallocateCableFromEdge, setEdges, immediateSave]);

  // Mobile-specific touch gesture handling
  useEffect(() => {
    if (!isMobile) return;

    let touchStartTime = 0;
    let touchTimeout: NodeJS.Timeout;

    const handleTouchStart = (e: TouchEvent) => {
      touchStartTime = Date.now();
      touchTimeout = setTimeout(() => {
        // Long press detected - show action menu
        if (Date.now() - touchStartTime > 500) {
          setMobileActionSheet(true);
        }
      }, 500);
    };

    const handleTouchEnd = () => {
      clearTimeout(touchTimeout);
    };

    const wrapper = reactFlowWrapper.current;
    if (wrapper) {
      wrapper.addEventListener('touchstart', handleTouchStart, { passive: true });
      wrapper.addEventListener('touchend', handleTouchEnd);
      
      return () => {
        wrapper.removeEventListener('touchstart', handleTouchStart);
        wrapper.removeEventListener('touchend', handleTouchEnd);
      };
    }
  }, [isMobile, reactFlowWrapper]);

  return (
    <div className="w-full h-[calc(100vh-4rem)] flex flex-col relative">
      {/* Mobile Top Actions Bar */}
      {isMobile ? (
        <div className="absolute top-2 left-2 right-2 z-20 flex justify-between gap-2">
          <Sheet open={isSidebarOpen} onOpenChange={setIsSidebarOpen}>
            <SheetTrigger asChild>
              <Button
                variant="outline"
                size="icon"
                className="bg-white/95 backdrop-blur-sm shadow-md h-10 w-10"
              >
                <Menu className="h-5 w-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="left" className="w-[85vw] max-w-sm p-0">
              <SheetHeader className="p-4 border-b">
                <SheetTitle>Job Settings</SheetTitle>
              </SheetHeader>
              <div className="overflow-y-auto h-full pb-20">
                <JobDiagramSidebar
                  nodes={nodes}
                  edges={edges}
                  selectedShearstreamBoxes={selectedShearstreamBoxes}
                  selectedStarlink={selectedStarlink}
                  selectedCustomerComputers={selectedCustomerComputers}
                  updateWellName={updateWellName}
                  updateWellColor={updateWellColor}
                  updateWellsideGaugeName={updateWellsideGaugeName}
                  updateWellsideGaugeColor={updateWellsideGaugeColor}
                  updateWellGaugeType={updateWellGaugeType}
                  extrasOnLocation={extrasOnLocation}
                  onAddExtra={handleAddExtra}
                  onRemoveExtra={handleRemoveExtra}
                  onEquipmentSelect={handleEquipmentSelect}
                  onAddShearstreamBox={handleAddShearstreamBox}
                  onRemoveShearstreamBox={handleRemoveShearstreamBox}
                  onAddStarlink={handleAddStarlink}
                  onRemoveStarlink={handleRemoveStarlink}
                  onAddCustomerComputer={handleAddCustomerComputerWrapper}
                  onRemoveCustomerComputer={handleRemoveCustomerComputer}
                  getEquipmentStatus={getEquipmentStatus}
                  conflicts={conflicts}
                  resolveConflict={resolveConflict}
                />
              </div>
            </SheetContent>
          </Sheet>

          <div className="flex gap-2">
            <Sheet open={mobileActionSheet} onOpenChange={setMobileActionSheet}>
              <SheetTrigger asChild>
                <Button
                  variant="outline"
                  size="icon"
                  className="bg-white/95 backdrop-blur-sm shadow-md h-10 w-10"
                >
                  <Settings className="h-5 w-5" />
                </Button>
              </SheetTrigger>
              <SheetContent side="bottom" className="h-auto">
                <SheetHeader>
                  <SheetTitle>Quick Actions</SheetTitle>
                </SheetHeader>
                <div className="grid grid-cols-2 gap-3 mt-4">
                  <Button
                    variant="outline"
                    className="h-20 flex-col gap-2"
                    onClick={() => {
                      setIsPhotosPanelOpen(true);
                      setMobileActionSheet(false);
                    }}
                  >
                    <Camera className="h-6 w-6" />
                    <span className="text-xs">Photos</span>
                  </Button>
                  <Button
                    variant="outline"
                    className="h-20 flex-col gap-2"
                    onClick={() => {
                      setIsEquipmentPanelOpen(true);
                      setMobileActionSheet(false);
                    }}
                  >
                    <Package className="h-6 w-6" />
                    <span className="text-xs">Equipment</span>
                    {totalEquipmentRequired > 0 && (
                      <span className="text-xs bg-blue-500 text-white px-1 rounded">
                        {totalEquipmentRequired}
                      </span>
                    )}
                  </Button>
                  <Button
                    variant="outline"
                    className="h-20 flex-col gap-2"
                    onClick={() => {
                      setIsAllocationPanelOpen(true);
                      setMobileActionSheet(false);
                    }}
                  >
                    <Users className="h-6 w-6" />
                    <span className="text-xs">Allocation</span>
                  </Button>
                  <Button
                    variant="outline"
                    className="h-20 flex-col gap-2"
                    onClick={() => {
                      immediateSave();
                      setMobileActionSheet(false);
                    }}
                  >
                    <ChevronLeft className="h-6 w-6" />
                    <span className="text-xs">Save</span>
                  </Button>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        </div>
      ) : (
        /* Desktop Action Buttons */
        <div className="absolute top-2 left-2 md:top-4 md:left-4 z-20 flex gap-2">
          <Sheet open={isPhotosPanelOpen} onOpenChange={setIsPhotosPanelOpen}>
            <SheetTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="bg-white/95 backdrop-blur-sm shadow-md hover:bg-gray-50 border-gray-300"
              >
                <Camera className="h-4 w-4 md:mr-2" />
                <span className="hidden md:inline">Photos</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="bottom" className="h-[50vh] md:h-96 p-0">
              <JobPhotoPanel jobId={job.id} jobName={job.name} />
            </SheetContent>
          </Sheet>

          <Sheet open={isEquipmentPanelOpen} onOpenChange={setIsEquipmentPanelOpen}>
            <SheetTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="bg-white/95 backdrop-blur-sm shadow-md hover:bg-gray-50 border-gray-300"
              >
                <Package className="h-4 w-4 md:mr-2" />
                <span className="hidden md:inline">Equipment</span>
                {totalEquipmentRequired > 0 && (
                  <span className="ml-1 px-1 bg-blue-500 text-white text-xs rounded">
                    {totalEquipmentRequired}
                  </span>
                )}
                {conflicts.length > 0 && (
                  <span className="ml-1 px-1 bg-red-500 text-white text-xs rounded hidden sm:inline">
                    {conflicts.length}
                  </span>
                )}
                {!validateInventoryConsistency() && (
                  <AlertTriangle className="h-3 w-3 ml-1 text-yellow-500" />
                )}
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-full md:w-96 p-4">
              <CompactJobEquipmentPanel
                jobId={job.id}
                jobName={job.name}
                nodes={nodes}
                edges={edges}
              />
            </SheetContent>
          </Sheet>

          <Sheet open={isAllocationPanelOpen} onOpenChange={setIsAllocationPanelOpen}>
            <SheetTrigger asChild>
              <Button
                variant="outline"
                size="sm"
                className="bg-white/95 backdrop-blur-sm shadow-md hover:bg-gray-50 border-gray-300"
              >
                <Package className="h-4 w-4 md:mr-2" />
                <span className="hidden md:inline">Allocation</span>
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="w-full md:w-96 p-0">
              <EquipmentAllocationPanel
                nodes={nodes}
                edges={edges}
                jobId={job.id}
                onAllocateEquipment={handleAllocateEquipmentToNode}
                onDeallocateEquipment={handleDeallocateEquipmentFromNode}
                onAllocateCable={handleAllocateCableToEdge}
                onDeallocateCable={handleDeallocateCableFromEdge}
              />
            </SheetContent>
          </Sheet>
        </div>
      )}
      
      <div className="flex-1 flex gap-4">
        {/* Desktop sidebar */}
        {!isMobile && (
          <div className="hidden md:block">
            <JobDiagramSidebar
              nodes={nodes}
              edges={edges}
              selectedShearstreamBoxes={selectedShearstreamBoxes}
              selectedStarlink={selectedStarlink}
              selectedCustomerComputers={selectedCustomerComputers}
              updateWellName={updateWellName}
              updateWellColor={updateWellColor}
              updateWellsideGaugeName={updateWellsideGaugeName}
              updateWellsideGaugeColor={updateWellsideGaugeColor}
              updateWellGaugeType={updateWellGaugeType}
              extrasOnLocation={extrasOnLocation}
              onAddExtra={handleAddExtra}
              onRemoveExtra={handleRemoveExtra}
              onEquipmentSelect={handleEquipmentSelect}
              onAddShearstreamBox={handleAddShearstreamBox}
              onRemoveShearstreamBox={handleRemoveShearstreamBox}
              onAddStarlink={handleAddStarlink}
              onRemoveStarlink={handleRemoveStarlink}
              onAddCustomerComputer={handleAddCustomerComputerWrapper}
              onRemoveCustomerComputer={handleRemoveCustomerComputer}
              getEquipmentStatus={getEquipmentStatus}
              conflicts={conflicts}
              resolveConflict={resolveConflict}
            />
          </div>
        )}

        <div className="flex-1 relative">
          <FloatingDiagramControls
            selectedCableType={selectedCableType}
            setSelectedCableType={setSelectedCableType}
            addYAdapter={addYAdapter}
            onAddShearstreamBox={handleAddShearstreamBox}
            addCustomerComputer={addCustomerComputer}
            jobId={job.id}
            isMobile={isMobile}
          />
          
          <JobDiagramCanvas
            nodes={nodes}
            edges={edges}
            onNodesChange={enhancedOnNodesChange}
            onEdgesChange={enhancedOnEdgesChange}
            onConnect={enhancedOnConnect}
            onNodesDelete={onNodesDelete}
            reactFlowWrapper={reactFlowWrapper}
            immediateSave={immediateSave}
          />
        </div>
      </div>

      {/* Job Contacts Panel - Hidden on mobile or shown as sheet */}
      {!isMobile && (
        <JobContactsPanel 
          jobId={job.id}
          jobName={job.name}
          client={job.client || ''}
          className="max-w-6xl mx-auto mb-4"
        />
      )}

      {/* Mobile Sheets for Panels */}
      {isMobile && (
        <>
          <Sheet open={isPhotosPanelOpen} onOpenChange={setIsPhotosPanelOpen}>
            <SheetContent side="bottom" className="h-[70vh]">
              <JobPhotoPanel jobId={job.id} jobName={job.name} />
            </SheetContent>
          </Sheet>

          <Sheet open={isEquipmentPanelOpen} onOpenChange={setIsEquipmentPanelOpen}>
            <SheetContent side="bottom" className="h-[70vh]">
              <CompactJobEquipmentPanel
                jobId={job.id}
                jobName={job.name}
                nodes={nodes}
                edges={edges}
              />
            </SheetContent>
          </Sheet>

          <Sheet open={isAllocationPanelOpen} onOpenChange={setIsAllocationPanelOpen}>
            <SheetContent side="bottom" className="h-[70vh]">
              <EquipmentAllocationPanel
                nodes={nodes}
                edges={edges}
                jobId={job.id}
                onAllocateEquipment={handleAllocateEquipmentToNode}
                onDeallocateEquipment={handleDeallocateEquipmentFromNode}
                onAllocateCable={handleAllocateCableToEdge}
                onDeallocateCable={handleDeallocateCableFromEdge}
              />
            </SheetContent>
          </Sheet>
        </>
      )}

      {/* Dialogs */}
      <CableAllocationDialog
        isOpen={cableAllocationDialog.isOpen}
        onClose={() => setCableAllocationDialog({ isOpen: false, edge: null })}
        onConfirm={handleConfirmCableAllocation}
        edge={cableAllocationDialog.edge}
        jobId={job.id}
        cableTypeId={cableAllocationDialog.edge?.data?.cableTypeId || ''}
      />

      <NodeEquipmentAllocationDialog
        isOpen={nodeAllocationDialog.isOpen}
        onClose={() => setNodeAllocationDialog({ isOpen: false, node: null })}
        onConfirm={handleConfirmNodeAllocation}
        node={nodeAllocationDialog.node || (nodeAllocationDialog.nodeType ? { 
          id: 'temp', 
          type: nodeAllocationDialog.nodeType, 
          position: nodeAllocationDialog.position || { x: 0, y: 0 },
          data: { label: 'New Equipment' }
        } as Node : null)}
        jobId={job.id}
      />

      <YAdapterAllocationDialog
        open={yAdapterDialogOpen}
        onClose={() => setYAdapterDialogOpen(false)}
        onAllocate={(equipmentId, equipmentName) => {
          addYAdapterWithEquipment(equipmentId, equipmentName);
          const newNodeId = `y-adapter-${nodeIdCounter}`;
          allocateEquipmentToNode(newNodeId, equipmentId);
        }}
        jobId={job.id}
        existingAllocations={Object.values(allocatedEquipment.nodeAllocations || {})}
      />
    </div>
  );
};

export default JobDiagram;