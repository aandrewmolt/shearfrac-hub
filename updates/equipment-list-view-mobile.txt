import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { Package, Plus, WifiOff, Wifi, RefreshCw, Filter, X, Search, MoreVertical } from 'lucide-react';
import { useInventory } from '@/contexts/InventoryContext';
import { useInventoryMapperSync } from '@/hooks/useInventoryMapperSync';
import { useJobs } from '@/hooks/useJobs';
import { toast } from 'sonner';
import { isEquipmentAtLocation } from '@/utils/equipmentLocation';
import EquipmentFormDialog from './EquipmentFormDialog';
import { ResponsiveTable } from '@/components/ui/ResponsiveTable';
import ConflictIndicator from './ConflictIndicator';
import { SyncStatusIndicator } from '@/components/InventoryMapperSync/SyncStatusIndicator';
import { useIsMobile } from '@/hooks/use-mobile';
import { cn } from '@/lib/utils';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const EquipmentListView = () => {
  const { data, updateSingleEquipmentItem, addEquipmentItem, deleteEquipmentItem, updateIndividualEquipment, refreshData } = useInventory();
  const { conflicts, getEquipmentStatus, syncInventoryStatus, isValidating } = useInventoryMapperSync();
  const isOnline = navigator.onLine;
  const isSyncing = false;
  const manualSync = () => refreshData();
  const { jobs } = useJobs();
  const isMobile = useIsMobile();
  
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterLocation, setFilterLocation] = useState('all');
  const [filterCategory, setFilterCategory] = useState('all');
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [editingItem, setEditingItem] = useState<any>(null);
  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);
  const [formData, setFormData] = useState({
    typeId: '',
    locationId: '',
    quantity: 1,
    status: 'available' as const,
    notes: ''
  });

  const getEquipmentTypeName = (typeId: string) => {
    const type = data.equipmentTypes.find(t => t.id === typeId);
    return type?.name || 'Unknown Type';
  };

  const getEquipmentTypeCategory = (typeId: string) => {
    const type = data.equipmentTypes.find(t => t.id === typeId);
    return type?.category || 'other';
  };

  const getLocationName = (locationId: string) => {
    const location = data.storageLocations.find(l => l.id === locationId);
    return location?.name || 'Unknown Location';
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'available':
        return 'bg-green-100 text-green-800';
      case 'deployed':
        return 'bg-blue-100 text-blue-800';
      case 'red-tagged':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'cables':
        return 'bg-blue-100 text-blue-800';
      case 'gauges':
        return 'bg-green-100 text-green-800';
      case 'adapters':
        return 'bg-yellow-100 text-yellow-800';
      case 'communication':
        return 'bg-purple-100 text-purple-800';
      case 'power':
        return 'bg-orange-100 text-orange-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Filter individual equipment
  const filteredIndividualEquipment = (data.individualEquipment || []).filter(item => {
    if (!item || !item.typeId || !item.locationId) return false;
    
    const typeName = getEquipmentTypeName(item.typeId).toLowerCase();
    const typeCategory = getEquipmentTypeCategory(item.typeId);
    const locationName = getLocationName(item.locationId).toLowerCase();
    const matchesSearch = typeName.includes(searchTerm.toLowerCase()) || 
                         locationName.includes(searchTerm.toLowerCase()) ||
                         (item.equipmentId && item.equipmentId.toLowerCase().includes(searchTerm.toLowerCase())) ||
                         (item.name && item.name.toLowerCase().includes(searchTerm.toLowerCase())) ||
                         (item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesStatus = filterStatus === 'all' || item.status === filterStatus;
    
    let matchesLocation = false;
    if (filterLocation === 'all') {
      matchesLocation = true;
    } else {
      const isJobFilter = jobs.some(job => job.id === filterLocation);
      const locationType = isJobFilter ? 'job' : 'storage';
      matchesLocation = isEquipmentAtLocation(item, filterLocation, locationType);
    }
    
    const matchesCategory = filterCategory === 'all' || typeCategory === filterCategory;
    
    return matchesSearch && matchesStatus && matchesLocation && matchesCategory;
  });

  const totalItems = filteredIndividualEquipment.length;
  const deployedCount = filteredIndividualEquipment.filter(item => item.status === 'deployed').length;

  const handleIndividualStatusChange = (itemId: string, newStatus: 'available' | 'deployed' | 'maintenance' | 'red-tagged' | 'retired') => {
    updateIndividualEquipment(itemId, { status: newStatus });
    toast.success('Equipment status updated successfully');
  };

  const handleDelete = async (itemId: string) => {
    if (window.confirm('Are you sure you want to delete this equipment item?')) {
      try {
        await deleteEquipmentItem(itemId);
        toast.success('Equipment item deleted successfully');
      } catch (error) {
        toast.error('Failed to delete equipment item');
      }
    }
  };

  const handleSubmit = () => {
    if (!formData.typeId || !formData.locationId) {
      toast.error('Please select equipment type and location');
      return;
    }

    try {
      if (editingItem) {
        updateSingleEquipmentItem(editingItem.id, formData);
        toast.success('Equipment updated successfully');
      } else {
        addEquipmentItem(formData);
        toast.success('Equipment added successfully');
      }
      resetForm();
    } catch (error) {
      toast.error('Failed to save equipment');
    }
  };

  const resetForm = () => {
    setFormData({
      typeId: '',
      locationId: '',
      quantity: 1,
      status: 'available',
      notes: ''
    });
    setEditingItem(null);
    setIsAddDialogOpen(false);
  };

  const handleEdit = (item: any) => {
    setEditingItem(item);
    setFormData({
      typeId: item.typeId,
      locationId: item.locationId,
      quantity: item.quantity,
      status: item.status,
      notes: item.notes || ''
    });
    setIsAddDialogOpen(true);
  };

  const clearFilters = () => {
    setSearchTerm('');
    setFilterStatus('all');
    setFilterLocation('all');
    setFilterCategory('all');
    setMobileFiltersOpen(false);
  };

  const hasActiveFilters = searchTerm || filterStatus !== 'all' || filterLocation !== 'all' || filterCategory !== 'all';

  // Table columns for ResponsiveTable
  const columns = [
    {
      key: 'equipmentId',
      header: 'ID',
      render: (item: any) => (
        <span className="font-medium">{item.equipmentId || item.name}</span>
      ),
      priority: 'high' as const,
    },
    {
      key: 'type',
      header: 'Type',
      render: (item: any) => (
        <div className="flex items-center gap-2">
          <span>{getEquipmentTypeName(item.typeId)}</span>
          <Badge variant="outline" className={cn("text-xs", getCategoryColor(getEquipmentTypeCategory(item.typeId)))}>
            {getEquipmentTypeCategory(item.typeId)}
          </Badge>
        </div>
      ),
      priority: 'high' as const,
    },
    {
      key: 'location',
      header: 'Location',
      render: (item: any) => getLocationName(item.locationId),
      priority: 'medium' as const,
    },
    {
      key: 'status',
      header: 'Status',
      render: (item: any) => (
        <Badge className={cn("text-xs", getStatusColor(item.status))}>
          {item.status}
        </Badge>
      ),
      priority: 'high' as const,
    },
    {
      key: 'notes',
      header: 'Notes',
      render: (item: any) => item.notes ? (
        <span className="text-sm text-gray-600 truncate max-w-[200px] block">
          {item.notes}
        </span>
      ) : '-',
      priority: 'low' as const,
    },
  ];

  const actions = [
    {
      label: 'Edit',
      onClick: handleEdit,
    },
    {
      label: 'Change Status',
      onClick: (item: any) => {
        // Show status options
      },
    },
    {
      label: 'Delete',
      onClick: (item: any) => handleDelete(item.id),
      variant: 'destructive' as const,
    },
  ];

  return (
    <Card className="bg-white shadow-lg">
      <CardHeader className="pb-3">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
          <CardTitle className="flex items-center gap-2 text-base sm:text-lg">
            <Package className="h-5 w-5" />
            <span className="truncate">
              Equipment List ({totalItems} items{deployedCount > 0 ? `, ${deployedCount} deployed` : ''})
            </span>
            <SyncStatusIndicator />
            
            {!isOnline && (
              <Badge variant="outline" className="gap-1">
                <WifiOff className="h-3 w-3" />
                Offline
              </Badge>
            )}
          </CardTitle>
          
          <div className="flex gap-2 w-full sm:w-auto">
            <ConflictIndicator conflicts={conflicts} />
            
            {!isMobile && (
              <Button
                variant="outline"
                size="sm"
                onClick={isOnline ? manualSync : syncInventoryStatus}
                disabled={isValidating || isSyncing}
                className="gap-2"
              >
                {isSyncing ? (
                  <>
                    <RefreshCw className="h-4 w-4 animate-spin" />
                    Syncing...
                  </>
                ) : isOnline ? (
                  <>
                    <Wifi className="h-4 w-4" />
                    Sync Now
                  </>
                ) : (
                  <>
                    <WifiOff className="h-4 w-4" />
                    Sync Status
                  </>
                )}
              </Button>
            )}
            
            <Button 
              onClick={() => {
                setEditingItem(null);
                setIsAddDialogOpen(true);
              }}
              size="sm"
              className={cn(isMobile && "flex-1")}
            >
              <Plus className="mr-2 h-4 w-4" />
              Add Equipment
            </Button>
          </div>
        </div>
        
        {/* Mobile Search and Filter */}
        {isMobile ? (
          <div className="flex gap-2 mt-3">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-9 h-10"
              />
            </div>
            <Sheet open={mobileFiltersOpen} onOpenChange={setMobileFiltersOpen}>
              <SheetTrigger asChild>
                <Button variant="outline" size="icon" className="h-10 w-10 relative">
                  <Filter className="h-4 w-4" />
                  {hasActiveFilters && (
                    <div className="absolute -top-1 -right-1 h-3 w-3 bg-blue-600 rounded-full" />
                  )}
                </Button>
              </SheetTrigger>
              <SheetContent side="bottom" className="h-auto max-h-[80vh]">
                <SheetHeader>
                  <SheetTitle>Filter Equipment</SheetTitle>
                </SheetHeader>
                <div className="space-y-4 mt-6">
                  <div>
                    <label className="text-sm font-medium mb-2 block">Status</label>
                    <Select value={filterStatus} onValueChange={setFilterStatus}>
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Status</SelectItem>
                        <SelectItem value="available">Available</SelectItem>
                        <SelectItem value="deployed">Deployed</SelectItem>
                        <SelectItem value="red-tagged">Red Tagged</SelectItem>
                        <SelectItem value="maintenance">Maintenance</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-2 block">Location</label>
                    <Select value={filterLocation} onValueChange={setFilterLocation}>
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Locations</SelectItem>
                        {data.storageLocations.map(loc => (
                          <SelectItem key={loc.id} value={loc.id}>
                            {loc.name}
                          </SelectItem>
                        ))}
                        {jobs.length > 0 && (
                          <>
                            <SelectItem value="separator" disabled>
                              ──── Jobs ────
                            </SelectItem>
                            {jobs.map(job => (
                              <SelectItem key={job.id} value={job.id}>
                                {job.name}
                              </SelectItem>
                            ))}
                          </>
                        )}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium mb-2 block">Category</label>
                    <Select value={filterCategory} onValueChange={setFilterCategory}>
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Categories</SelectItem>
                        <SelectItem value="cables">Cables</SelectItem>
                        <SelectItem value="gauges">Gauges</SelectItem>
                        <SelectItem value="adapters">Adapters</SelectItem>
                        <SelectItem value="communication">Communication</SelectItem>
                        <SelectItem value="power">Power</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div className="flex gap-2 pt-4">
                    <Button variant="outline" onClick={clearFilters} className="flex-1">
                      Clear All
                    </Button>
                    <Button onClick={() => setMobileFiltersOpen(false)} className="flex-1">
                      Apply Filters
                    </Button>
                  </div>
                </div>
              </SheetContent>
            </Sheet>
          </div>
        ) : (
          /* Desktop Filters */
          <div className="flex flex-wrap gap-2 mt-4">
            <div className="flex-1 min-w-[200px]">
              <Input
                placeholder="Search equipment..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full"
              />
            </div>
            
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-[150px]">
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="available">Available</SelectItem>
                <SelectItem value="deployed">Deployed</SelectItem>
                <SelectItem value="red-tagged">Red Tagged</SelectItem>
                <SelectItem value="maintenance">Maintenance</SelectItem>
              </SelectContent>
            </Select>
            
            <Select value={filterLocation} onValueChange={setFilterLocation}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Location" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Locations</SelectItem>
                {data.storageLocations.map(loc => (
                  <SelectItem key={loc.id} value={loc.id}>
                    {loc.name}
                  </SelectItem>
                ))}
                {jobs.length > 0 && jobs.map(job => (
                  <SelectItem key={job.id} value={job.id}>
                    {job.name} (Job)
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            
            <Select value={filterCategory} onValueChange={setFilterCategory}>
              <SelectTrigger className="w-[150px]">
                <SelectValue placeholder="Category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                <SelectItem value="cables">Cables</SelectItem>
                <SelectItem value="gauges">Gauges</SelectItem>
                <SelectItem value="adapters">Adapters</SelectItem>
                <SelectItem value="communication">Communication</SelectItem>
                <SelectItem value="power">Power</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
            
            {hasActiveFilters && (
              <Button variant="ghost" size="sm" onClick={clearFilters}>
                Clear filters
              </Button>
            )}
          </div>
        )}
        
        {/* Active filters display on mobile */}
        {isMobile && hasActiveFilters && (
          <div className="flex flex-wrap gap-1 mt-2">
            {searchTerm && (
              <Badge variant="secondary" className="text-xs">
                Search: {searchTerm}
                <button onClick={() => setSearchTerm('')} className="ml-1">
                  <X className="h-3 w-3" />
                </button>
              </Badge>
            )}
            {filterStatus !== 'all' && (
              <Badge variant="secondary" className="text-xs">
                {filterStatus}
                <button onClick={() => setFilterStatus('all')} className="ml-1">
                  <X className="h-3 w-3" />
                </button>
              </Badge>
            )}
            {filterLocation !== 'all' && (
              <Badge variant="secondary" className="text-xs">
                {getLocationName(filterLocation)}
                <button onClick={() => setFilterLocation('all')} className="ml-1">
                  <X className="h-3 w-3" />
                </button>
              </Badge>
            )}
            {filterCategory !== 'all' && (
              <Badge variant="secondary" className="text-xs">
                {filterCategory}
                <button onClick={() => setFilterCategory('all')} className="ml-1">
                  <X className="h-3 w-3" />
                </button>
              </Badge>
            )}
          </div>
        )}
      </CardHeader>
      
      <CardContent>
        {/* Equipment Summary */}
        <div className="mb-4 p-3 sm:p-4 bg-gray-50 rounded-lg">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <div className="text-gray-600">Total Equipment</div>
              <div className="text-xl font-semibold">{totalItems}</div>
            </div>
            <div>
              <div className="text-gray-600">Deployed</div>
              <div className="text-xl font-semibold text-blue-600">{deployedCount}</div>
            </div>
          </div>
        </div>
        
        {/* Equipment Table/Cards */}
        <ResponsiveTable
          data={filteredIndividualEquipment}
          columns={columns}
          actions={actions}
          onRowClick={handleEdit}
          emptyMessage="No equipment found"
          loading={false}
          getRowId={(item) => item.id}
        />
        
        <EquipmentFormDialog
          isOpen={isAddDialogOpen}
          onOpenChange={setIsAddDialogOpen}
          editingItem={editingItem}
          formData={formData}
          setFormData={setFormData}
          data={data}
          onSubmit={handleSubmit}
          onCancel={resetForm}
          getCategoryColor={getCategoryColor}
        />
      </CardContent>
    </Card>
  );
};

export default EquipmentListView;