{
  "service": {
    "service": "rigup-backend",
    "serviceObject": {
      "name": "rigup-backend"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "dev",
      "region": "us-east-1",
      "apiGateway": {
        "binaryMediaTypes": [
          "image/*",
          "application/pdf"
        ],
        "minimumCompressionSize": 1024
      },
      "environment": {
        "STAGE": "dev",
        "REGION": "us-east-1",
        "JOBS_TABLE": "rigup-backend-jobs-dev",
        "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
        "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
        "CONTACTS_TABLE": "rigup-backend-contacts-dev",
        "CLIENTS_TABLE": "rigup-backend-clients-dev",
        "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
        "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
        "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-jobs-dev",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-jobs-dev/index/*",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-diagrams-dev",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-equipment-dev",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-equipment-dev/index/*",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-contacts-dev",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-contacts-dev/index/*",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-clients-dev",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-clients-dev/index/*",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-deployments-dev",
            "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-deployments-dev/index/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::rigup-backend-storage-dev-571066102634/*",
            "arn:aws:s3:::rigup-backend-photos-dev-571066102634/*",
            "arn:aws:s3:::rigup-backend-storage-dev-571066102634",
            "arn:aws:s3:::rigup-backend-photos-dev-571066102634"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObjectAcl",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::rigup-backend-storage-dev-571066102634/*",
            "arn:aws:s3:::rigup-backend-photos-dev-571066102634/*"
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "HealthCheckLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-healthCheck"
            }
          },
          "GetJobsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getJobs"
            }
          },
          "GetJobLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getJob"
            }
          },
          "CreateJobLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-createJob"
            }
          },
          "UpdateJobLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-updateJob"
            }
          },
          "DeleteJobLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-deleteJob"
            }
          },
          "GetDiagramLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getDiagram"
            }
          },
          "SaveDiagramLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-saveDiagram"
            }
          },
          "GetEquipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getEquipment"
            }
          },
          "GetEquipmentItemLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getEquipmentItem"
            }
          },
          "CreateEquipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-createEquipment"
            }
          },
          "UpdateEquipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-updateEquipment"
            }
          },
          "UpdateEquipmentStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-updateEquipmentStatus"
            }
          },
          "DeployEquipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-deployEquipment"
            }
          },
          "ReturnEquipmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-returnEquipment"
            }
          },
          "GetUploadUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getUploadUrl"
            }
          },
          "GetPhotoUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getPhotoUrl"
            }
          },
          "DeletePhotoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-deletePhoto"
            }
          },
          "GetContactsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getContacts"
            }
          },
          "GetContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getContact"
            }
          },
          "CreateContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-createContact"
            }
          },
          "UpdateContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-updateContact"
            }
          },
          "DeleteContactLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-deleteContact"
            }
          },
          "GetClientsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-getClients"
            }
          },
          "CreateClientLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-createClient"
            }
          },
          "ExportDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-exportData"
            }
          },
          "ImportDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-importData"
            }
          },
          "ListJobPhotosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/rigup-backend-dev-listJobPhotos"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "rigup-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rigup-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rigup-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "rigup-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HealthCheckLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/health.check",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-healthCheck",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HealthCheckLogGroup"
            ]
          },
          "GetJobsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/jobs.list",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getJobs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetJobsLogGroup"
            ]
          },
          "GetJobLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/jobs.get",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getJob",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetJobLogGroup"
            ]
          },
          "CreateJobLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/jobs.create",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-createJob",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateJobLogGroup"
            ]
          },
          "UpdateJobLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/jobs.update",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-updateJob",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateJobLogGroup"
            ]
          },
          "DeleteJobLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/jobs.delete",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-deleteJob",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteJobLogGroup"
            ]
          },
          "GetDiagramLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/diagrams.get",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getDiagram",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDiagramLogGroup"
            ]
          },
          "SaveDiagramLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/diagrams.save",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-saveDiagram",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveDiagramLogGroup"
            ]
          },
          "GetEquipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.list",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getEquipment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEquipmentLogGroup"
            ]
          },
          "GetEquipmentItemLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.get",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getEquipmentItem",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEquipmentItemLogGroup"
            ]
          },
          "CreateEquipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.create",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-createEquipment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEquipmentLogGroup"
            ]
          },
          "UpdateEquipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.update",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-updateEquipment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEquipmentLogGroup"
            ]
          },
          "UpdateEquipmentStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.updateStatus",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-updateEquipmentStatus",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEquipmentStatusLogGroup"
            ]
          },
          "DeployEquipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.deploy",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-deployEquipment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeployEquipmentLogGroup"
            ]
          },
          "ReturnEquipmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/equipment.return",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-returnEquipment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ReturnEquipmentLogGroup"
            ]
          },
          "GetUploadUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/photos.getUploadUrl",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getUploadUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUploadUrlLogGroup"
            ]
          },
          "GetPhotoUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/photos.getPhotoUrl",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getPhotoUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPhotoUrlLogGroup"
            ]
          },
          "DeletePhotoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/photos.delete",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-deletePhoto",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeletePhotoLogGroup"
            ]
          },
          "GetContactsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/contacts.list",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getContacts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetContactsLogGroup"
            ]
          },
          "GetContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/contacts.get",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getContact",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetContactLogGroup"
            ]
          },
          "CreateContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/contacts.create",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-createContact",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateContactLogGroup"
            ]
          },
          "UpdateContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/contacts.update",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-updateContact",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateContactLogGroup"
            ]
          },
          "DeleteContactLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/contacts.delete",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-deleteContact",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteContactLogGroup"
            ]
          },
          "GetClientsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/clients.list",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-getClients",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClientsLogGroup"
            ]
          },
          "CreateClientLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/clients.create",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-createClient",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateClientLogGroup"
            ]
          },
          "ExportDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/export.exportData",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-exportData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExportDataLogGroup"
            ]
          },
          "ImportDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/import.importData",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-importData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ImportDataLogGroup"
            ]
          },
          "ListJobPhotosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z/rigup-backend.zip"
              },
              "Handler": "src/handlers/photos.listJobPhotos",
              "Runtime": "nodejs16.x",
              "FunctionName": "rigup-backend-dev-listJobPhotos",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "JOBS_TABLE": "rigup-backend-jobs-dev",
                  "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
                  "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
                  "CONTACTS_TABLE": "rigup-backend-contacts-dev",
                  "CLIENTS_TABLE": "rigup-backend-clients-dev",
                  "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
                  "STORAGE_BUCKET": "rigup-backend-storage-dev-571066102634",
                  "PHOTOS_BUCKET": "rigup-backend-photos-dev-571066102634"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListJobPhotosLogGroup"
            ]
          },
          "HealthCheckLambdaVersionExckXomMnhkBCkdDkt6ixUJGdBG2xhVVdYgDhYbeEk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HealthCheckLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetJobsLambdaVersion6e3KQrhs19DuH9WprqtRz7Gslx0FryDHL7WuS2SGs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetJobsLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetJobLambdaVersionttvaRP15uvolEgF4kmRPWpI083MGCwpKWdVwvXhf0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetJobLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "CreateJobLambdaVersionpaxsyjWpeP9h1BLDsP2EZsMICrc5n3KqisCXn3ENM4k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateJobLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "UpdateJobLambdaVersionKfmzs09x0LNvTa7XRA7cyWe7TaRflb1SYVbyDwV17k": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateJobLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "DeleteJobLambdaVersionizhIsBryVkblI6bptpCPhCT6fNmr3qronOn1qWro": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteJobLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetDiagramLambdaVersionKD2GHySfCyXuXAPvgsQ1bKvKB54UUgOANdFsE2t1oqo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDiagramLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "SaveDiagramLambdaVersionD5ZThGtOTEUOWgwl5NyLUOVv3QlqJSVSPpZdYz4A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveDiagramLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetEquipmentLambdaVersionr5deSN9KZkuKTczivQgvBsVWKKvLP5LMUQ45DtJt4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEquipmentLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetEquipmentItemLambdaVersionjorEPoPuRIkqGSH8ftPg0MeQX5mBMI4Y4OcOvkbamY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEquipmentItemLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "CreateEquipmentLambdaVersion1dY6WJfFwxaxwuQRLae69L1knA0jAxmRGE7xPcnev4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEquipmentLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "UpdateEquipmentLambdaVersionvpbESFfU8hb0njALtaqMdnkHkJqdtDgUDRjmjxoKcs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEquipmentLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "UpdateEquipmentStatusLambdaVersionwLuOad076Op3BjRJmC40aOjb7F4Cw5FEjrrrbgUMr7U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEquipmentStatusLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "DeployEquipmentLambdaVersiongyShhlc3Wo29gl3NXiePdxqRZW1Z63TliBNmLWM5A8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeployEquipmentLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "ReturnEquipmentLambdaVersionFc3Lk11qtpNfQNkPsEPwHsCKh9olZdb55JEwfJ7BdoU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReturnEquipmentLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetUploadUrlLambdaVersionk1fCMsqxuUrtbnV5MIxek4WPcHgxqNJB3OE38HZJvgc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUploadUrlLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetPhotoUrlLambdaVersionA8o5SLG7kpwTPvTC6v00fhLDf1iPqW4rT7tIGjmKbU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPhotoUrlLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "DeletePhotoLambdaVersionBXYPfXB4OFhs5dv4BKOrrMMzGvVZ0b4tzgN0o8Q3M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeletePhotoLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetContactsLambdaVersionCxY5a2NWQ55dCjjAUCG6ZmPJ0Ju4ZV9l5L8zYwZyk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetContactsLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetContactLambdaVersionaGuUcMWkRrnCkBtWpHEo8RDTFWPt3P0J7BROcaCYo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetContactLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "CreateContactLambdaVersionhBPpFAXJtfkBy7va0JHNiPMsLTH9xDUtVJ7M6T818": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateContactLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "UpdateContactLambdaVersionNekSDymmIbR4NmR8AXtLnb5I6n4QmF0BbUcCWNy0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateContactLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "DeleteContactLambdaVersionWCKtrq5oG13AMNY2N9uEZAyqiwclsumNPuUZpqK470": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteContactLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "GetClientsLambdaVersionngOKZ57FkzuvIxRnZXUk6sRugTVuoQgurYe2HQT840": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClientsLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "CreateClientLambdaVersion7ramgQfj1Y8MlrUHwjgURHJJSob1GjWHNfmrgZatAqU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateClientLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "ExportDataLambdaVersionXzkMBR5ukQUgr78oDU90ksdykJO8EPsGv61uKBbjhQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExportDataLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "ImportDataLambdaVersionZsKpMh4yhIFEHLellbb15JBlnTJrTRF6I3hqHVAA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ImportDataLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "ListJobPhotosLambdaVersionJ8GGbLtH2VlEdONghEsUHDxyXqmzXctnJT8F9TwP4Rs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListJobPhotosLambdaFunction"
              },
              "CodeSha256": "iXj/DoQhDjJXHN8VXOkAxwVnU4/Y25Vlq6vEx3lijCc="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-rigup-backend",
              "BinaryMediaTypes": [
                "image/*",
                "application/pdf"
              ],
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceHealth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "health",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "jobs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceJobs"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobsIdVarDiagram": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceJobsIdVar"
              },
              "PathPart": "diagram",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceJobsIdVarPhotos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceJobsIdVar"
              },
              "PathPart": "photos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEquipment": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "equipment",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEquipmentIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEquipment"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEquipmentIdVarStatus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEquipmentIdVar"
              },
              "PathPart": "status",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEquipmentDeploy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEquipment"
              },
              "PathPart": "deploy",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEquipmentReturn": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEquipment"
              },
              "PathPart": "return",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePhotos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "photos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePhotosUploadDashurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePhotos"
              },
              "PathPart": "upload-url",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePhotosKeyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePhotos"
              },
              "PathPart": "{key}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContacts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "contacts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceContactsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceContacts"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceClients": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "clients",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "export",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceExportTypeVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceExport"
              },
              "PathPart": "{type}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceImport": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "import",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceImportTypeVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceImport"
              },
              "PathPart": "{type}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "AWS_PROXY",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'true'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ],
                "IntegrationHttpMethod": "POST",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthCheckLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false
            },
            "DependsOn": [
              "HealthCheckLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodJobsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodJobsIdVarDiagramOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVarDiagram"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEquipmentOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEquipmentIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEquipmentIdVarStatusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentIdVarStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEquipmentDeployOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentDeploy"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEquipmentReturnOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentReturn"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosUploadDashurlOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosUploadDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPhotosKeyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosKeyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContacts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodContactsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodClientsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceClients"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodExportTypeVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportTypeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodImportTypeVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceImportTypeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodJobsIdVarPhotosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVarPhotos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HealthCheckLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HealthCheckLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetJobsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetJobsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetJobLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetJobLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateJobLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateJobLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateJobLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateJobLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteJobLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteJobLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsIdVarDiagramGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVarDiagram"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDiagramLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetDiagramLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsIdVarDiagramPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVarDiagram"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveDiagramLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaveDiagramLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEquipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEquipmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEquipmentItemLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEquipmentItemLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipment"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEquipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEquipmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEquipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateEquipmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentIdVarStatusPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentIdVarStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEquipmentStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateEquipmentStatusLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentDeployPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentDeploy"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeployEquipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeployEquipmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEquipmentReturnPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEquipmentReturn"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ReturnEquipmentLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ReturnEquipmentLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPhotosUploadDashurlPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosUploadDashurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUploadUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUploadUrlLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPhotosKeyVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosKeyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPhotoUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPhotoUrlLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPhotosKeyVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePhotosKeyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeletePhotoLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeletePhotoLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContactsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContacts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetContactsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetContactsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContactsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetContactLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetContactLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContactsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContacts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateContactLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateContactLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContactsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateContactLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateContactLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodContactsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceContactsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteContactLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteContactLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClientsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClients"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetClientsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetClientsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodClientsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceClients"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateClientLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateClientLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodExportTypeVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceExportTypeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ExportDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ExportDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodImportTypeVarPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceImportTypeVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ImportDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ImportDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodJobsIdVarPhotosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceJobsIdVarPhotos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListJobPhotosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListJobPhotosLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1756504064179": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHealthOptions",
              "ApiGatewayMethodJobsOptions",
              "ApiGatewayMethodJobsIdVarOptions",
              "ApiGatewayMethodJobsIdVarDiagramOptions",
              "ApiGatewayMethodEquipmentOptions",
              "ApiGatewayMethodEquipmentIdVarOptions",
              "ApiGatewayMethodEquipmentIdVarStatusOptions",
              "ApiGatewayMethodEquipmentDeployOptions",
              "ApiGatewayMethodEquipmentReturnOptions",
              "ApiGatewayMethodPhotosUploadDashurlOptions",
              "ApiGatewayMethodPhotosKeyVarOptions",
              "ApiGatewayMethodContactsOptions",
              "ApiGatewayMethodContactsIdVarOptions",
              "ApiGatewayMethodClientsOptions",
              "ApiGatewayMethodExportTypeVarOptions",
              "ApiGatewayMethodImportTypeVarOptions",
              "ApiGatewayMethodJobsIdVarPhotosOptions",
              "ApiGatewayMethodHealthGet",
              "ApiGatewayMethodHealthOptions",
              "ApiGatewayMethodJobsGet",
              "ApiGatewayMethodJobsIdVarGet",
              "ApiGatewayMethodJobsPost",
              "ApiGatewayMethodJobsIdVarPut",
              "ApiGatewayMethodJobsIdVarDelete",
              "ApiGatewayMethodJobsIdVarDiagramGet",
              "ApiGatewayMethodJobsIdVarDiagramPut",
              "ApiGatewayMethodEquipmentGet",
              "ApiGatewayMethodEquipmentIdVarGet",
              "ApiGatewayMethodEquipmentPost",
              "ApiGatewayMethodEquipmentIdVarPut",
              "ApiGatewayMethodEquipmentIdVarStatusPatch",
              "ApiGatewayMethodEquipmentDeployPost",
              "ApiGatewayMethodEquipmentReturnPost",
              "ApiGatewayMethodPhotosUploadDashurlPost",
              "ApiGatewayMethodPhotosKeyVarGet",
              "ApiGatewayMethodPhotosKeyVarDelete",
              "ApiGatewayMethodContactsGet",
              "ApiGatewayMethodContactsIdVarGet",
              "ApiGatewayMethodContactsPost",
              "ApiGatewayMethodContactsIdVarPut",
              "ApiGatewayMethodContactsIdVarDelete",
              "ApiGatewayMethodClientsGet",
              "ApiGatewayMethodClientsPost",
              "ApiGatewayMethodExportTypeVarPost",
              "ApiGatewayMethodImportTypeVarPost",
              "ApiGatewayMethodJobsIdVarPhotosGet"
            ]
          },
          "HealthCheckLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HealthCheckLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetJobsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetJobsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetJobLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetJobLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateJobLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateJobLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateJobLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateJobLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteJobLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteJobLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDiagramLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDiagramLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveDiagramLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveDiagramLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEquipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEquipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEquipmentItemLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEquipmentItemLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEquipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEquipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEquipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEquipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEquipmentStatusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEquipmentStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeployEquipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeployEquipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ReturnEquipmentLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ReturnEquipmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUploadUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUploadUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPhotoUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPhotoUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeletePhotoLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeletePhotoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetContactsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetContactsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetContactLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateContactLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateContactLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteContactLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteContactLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetClientsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClientsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateClientLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateClientLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ExportDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExportDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ImportDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ImportDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListJobPhotosLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListJobPhotosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "StorageBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "rigup-backend-storage-dev-571066102634",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "LifecycleConfiguration": {
                "Rules": [
                  {
                    "Id": "MoveToIA",
                    "Status": "Enabled",
                    "Transitions": [
                      {
                        "StorageClass": "STANDARD_IA",
                        "TransitionInDays": 30
                      }
                    ]
                  },
                  {
                    "Id": "MoveToGlacier",
                    "Status": "Enabled",
                    "Transitions": [
                      {
                        "StorageClass": "GLACIER",
                        "TransitionInDays": 90
                      }
                    ]
                  },
                  {
                    "Id": "DeleteOldVersions",
                    "Status": "Enabled",
                    "NoncurrentVersionExpirationInDays": 365
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "PhotosBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "rigup-backend-photos-dev-571066102634",
              "LifecycleConfiguration": {
                "Rules": [
                  {
                    "Id": "MovePhotosToIA",
                    "Status": "Enabled",
                    "Transitions": [
                      {
                        "StorageClass": "STANDARD_IA",
                        "TransitionInDays": 60
                      }
                    ]
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "JobsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "rigup-backend-jobs-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "client",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "status-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "client-index",
                  "KeySchema": [
                    {
                      "AttributeName": "client",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "DiagramsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "rigup-backend-diagrams-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "jobId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "EquipmentTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "rigup-backend-equipment-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "equipmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "equipmentId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "equipmentId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "status-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "KEYS_ONLY"
                  }
                },
                {
                  "IndexName": "jobId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "jobId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "ContactsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "rigup-backend-contacts-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "type-index",
                  "KeySchema": [
                    {
                      "AttributeName": "type",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "ClientsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "rigup-backend-clients-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "name-index",
                  "KeySchema": [
                    {
                      "AttributeName": "name",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          },
          "DeploymentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "rigup-backend-deployments-dev",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "jobId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "jobId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "dev"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "HealthCheckLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HealthCheckLambdaVersionExckXomMnhkBCkdDkt6ixUJGdBG2xhVVdYgDhYbeEk"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-HealthCheckLambdaFunctionQualifiedArn"
            }
          },
          "GetJobsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetJobsLambdaVersion6e3KQrhs19DuH9WprqtRz7Gslx0FryDHL7WuS2SGs"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetJobsLambdaFunctionQualifiedArn"
            }
          },
          "GetJobLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetJobLambdaVersionttvaRP15uvolEgF4kmRPWpI083MGCwpKWdVwvXhf0"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetJobLambdaFunctionQualifiedArn"
            }
          },
          "CreateJobLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateJobLambdaVersionpaxsyjWpeP9h1BLDsP2EZsMICrc5n3KqisCXn3ENM4k"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-CreateJobLambdaFunctionQualifiedArn"
            }
          },
          "UpdateJobLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateJobLambdaVersionKfmzs09x0LNvTa7XRA7cyWe7TaRflb1SYVbyDwV17k"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-UpdateJobLambdaFunctionQualifiedArn"
            }
          },
          "DeleteJobLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteJobLambdaVersionizhIsBryVkblI6bptpCPhCT6fNmr3qronOn1qWro"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-DeleteJobLambdaFunctionQualifiedArn"
            }
          },
          "GetDiagramLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDiagramLambdaVersionKD2GHySfCyXuXAPvgsQ1bKvKB54UUgOANdFsE2t1oqo"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetDiagramLambdaFunctionQualifiedArn"
            }
          },
          "SaveDiagramLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveDiagramLambdaVersionD5ZThGtOTEUOWgwl5NyLUOVv3QlqJSVSPpZdYz4A"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-SaveDiagramLambdaFunctionQualifiedArn"
            }
          },
          "GetEquipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEquipmentLambdaVersionr5deSN9KZkuKTczivQgvBsVWKKvLP5LMUQ45DtJt4"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetEquipmentLambdaFunctionQualifiedArn"
            }
          },
          "GetEquipmentItemLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEquipmentItemLambdaVersionjorEPoPuRIkqGSH8ftPg0MeQX5mBMI4Y4OcOvkbamY"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetEquipmentItemLambdaFunctionQualifiedArn"
            }
          },
          "CreateEquipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEquipmentLambdaVersion1dY6WJfFwxaxwuQRLae69L1knA0jAxmRGE7xPcnev4"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-CreateEquipmentLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEquipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEquipmentLambdaVersionvpbESFfU8hb0njALtaqMdnkHkJqdtDgUDRjmjxoKcs"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-UpdateEquipmentLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEquipmentStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEquipmentStatusLambdaVersionwLuOad076Op3BjRJmC40aOjb7F4Cw5FEjrrrbgUMr7U"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-UpdateEquipmentStatusLambdaFunctionQualifiedArn"
            }
          },
          "DeployEquipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeployEquipmentLambdaVersiongyShhlc3Wo29gl3NXiePdxqRZW1Z63TliBNmLWM5A8"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-DeployEquipmentLambdaFunctionQualifiedArn"
            }
          },
          "ReturnEquipmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReturnEquipmentLambdaVersionFc3Lk11qtpNfQNkPsEPwHsCKh9olZdb55JEwfJ7BdoU"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-ReturnEquipmentLambdaFunctionQualifiedArn"
            }
          },
          "GetUploadUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUploadUrlLambdaVersionk1fCMsqxuUrtbnV5MIxek4WPcHgxqNJB3OE38HZJvgc"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetUploadUrlLambdaFunctionQualifiedArn"
            }
          },
          "GetPhotoUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPhotoUrlLambdaVersionA8o5SLG7kpwTPvTC6v00fhLDf1iPqW4rT7tIGjmKbU"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetPhotoUrlLambdaFunctionQualifiedArn"
            }
          },
          "DeletePhotoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeletePhotoLambdaVersionBXYPfXB4OFhs5dv4BKOrrMMzGvVZ0b4tzgN0o8Q3M"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-DeletePhotoLambdaFunctionQualifiedArn"
            }
          },
          "GetContactsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetContactsLambdaVersionCxY5a2NWQ55dCjjAUCG6ZmPJ0Ju4ZV9l5L8zYwZyk"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetContactsLambdaFunctionQualifiedArn"
            }
          },
          "GetContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetContactLambdaVersionaGuUcMWkRrnCkBtWpHEo8RDTFWPt3P0J7BROcaCYo"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetContactLambdaFunctionQualifiedArn"
            }
          },
          "CreateContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateContactLambdaVersionhBPpFAXJtfkBy7va0JHNiPMsLTH9xDUtVJ7M6T818"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-CreateContactLambdaFunctionQualifiedArn"
            }
          },
          "UpdateContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateContactLambdaVersionNekSDymmIbR4NmR8AXtLnb5I6n4QmF0BbUcCWNy0"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-UpdateContactLambdaFunctionQualifiedArn"
            }
          },
          "DeleteContactLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteContactLambdaVersionWCKtrq5oG13AMNY2N9uEZAyqiwclsumNPuUZpqK470"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-DeleteContactLambdaFunctionQualifiedArn"
            }
          },
          "GetClientsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClientsLambdaVersionngOKZ57FkzuvIxRnZXUk6sRugTVuoQgurYe2HQT840"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-GetClientsLambdaFunctionQualifiedArn"
            }
          },
          "CreateClientLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateClientLambdaVersion7ramgQfj1Y8MlrUHwjgURHJJSob1GjWHNfmrgZatAqU"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-CreateClientLambdaFunctionQualifiedArn"
            }
          },
          "ExportDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExportDataLambdaVersionXzkMBR5ukQUgr78oDU90ksdykJO8EPsGv61uKBbjhQ"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-ExportDataLambdaFunctionQualifiedArn"
            }
          },
          "ImportDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ImportDataLambdaVersionZsKpMh4yhIFEHLellbb15JBlnTJrTRF6I3hqHVAA"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-ImportDataLambdaFunctionQualifiedArn"
            }
          },
          "ListJobPhotosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListJobPhotosLambdaVersionJ8GGbLtH2VlEdONghEsUHDxyXqmzXctnJT8F9TwP4Rs"
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-ListJobPhotosLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-rigup-backend-dev-ServiceEndpoint"
            }
          },
          "ApiGatewayUrl": {
            "Description": "API Gateway URL",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "us-east-1",
                  ".amazonaws.com/",
                  "dev"
                ]
              ]
            },
            "Export": {
              "Name": "rigup-backend-dev-ApiGatewayUrl"
            }
          },
          "StorageBucketName": {
            "Description": "Storage bucket name",
            "Value": {
              "Ref": "StorageBucket"
            },
            "Export": {
              "Name": "rigup-backend-dev-StorageBucket"
            }
          },
          "PhotosBucketName": {
            "Description": "Photos bucket name",
            "Value": {
              "Ref": "PhotosBucket"
            },
            "Export": {
              "Name": "rigup-backend-dev-PhotosBucket"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3001
      }
    },
    "pluginsData": {},
    "functions": {
      "healthCheck": {
        "handler": "src/handlers/health.check",
        "events": [
          {
            "http": {
              "path": "health",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "health",
              "method": "options",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token"
                ],
                "allowCredentials": true
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-healthCheck",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "HealthCheckLambdaVersionExckXomMnhkBCkdDkt6ixUJGdBG2xhVVdYgDhYbeEk"
      },
      "getJobs": {
        "handler": "src/handlers/jobs.list",
        "events": [
          {
            "http": {
              "path": "jobs",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getJobs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetJobsLambdaVersion6e3KQrhs19DuH9WprqtRz7Gslx0FryDHL7WuS2SGs"
      },
      "getJob": {
        "handler": "src/handlers/jobs.get",
        "events": [
          {
            "http": {
              "path": "jobs/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getJob",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetJobLambdaVersionttvaRP15uvolEgF4kmRPWpI083MGCwpKWdVwvXhf0"
      },
      "createJob": {
        "handler": "src/handlers/jobs.create",
        "events": [
          {
            "http": {
              "path": "jobs",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-createJob",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateJobLambdaVersionpaxsyjWpeP9h1BLDsP2EZsMICrc5n3KqisCXn3ENM4k"
      },
      "updateJob": {
        "handler": "src/handlers/jobs.update",
        "events": [
          {
            "http": {
              "path": "jobs/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-updateJob",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateJobLambdaVersionKfmzs09x0LNvTa7XRA7cyWe7TaRflb1SYVbyDwV17k"
      },
      "deleteJob": {
        "handler": "src/handlers/jobs.delete",
        "events": [
          {
            "http": {
              "path": "jobs/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-deleteJob",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteJobLambdaVersionizhIsBryVkblI6bptpCPhCT6fNmr3qronOn1qWro"
      },
      "getDiagram": {
        "handler": "src/handlers/diagrams.get",
        "events": [
          {
            "http": {
              "path": "jobs/{id}/diagram",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getDiagram",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetDiagramLambdaVersionKD2GHySfCyXuXAPvgsQ1bKvKB54UUgOANdFsE2t1oqo"
      },
      "saveDiagram": {
        "handler": "src/handlers/diagrams.save",
        "events": [
          {
            "http": {
              "path": "jobs/{id}/diagram",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-saveDiagram",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "SaveDiagramLambdaVersionD5ZThGtOTEUOWgwl5NyLUOVv3QlqJSVSPpZdYz4A"
      },
      "getEquipment": {
        "handler": "src/handlers/equipment.list",
        "events": [
          {
            "http": {
              "path": "equipment",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getEquipment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetEquipmentLambdaVersionr5deSN9KZkuKTczivQgvBsVWKKvLP5LMUQ45DtJt4"
      },
      "getEquipmentItem": {
        "handler": "src/handlers/equipment.get",
        "events": [
          {
            "http": {
              "path": "equipment/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getEquipmentItem",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetEquipmentItemLambdaVersionjorEPoPuRIkqGSH8ftPg0MeQX5mBMI4Y4OcOvkbamY"
      },
      "createEquipment": {
        "handler": "src/handlers/equipment.create",
        "events": [
          {
            "http": {
              "path": "equipment",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-createEquipment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateEquipmentLambdaVersion1dY6WJfFwxaxwuQRLae69L1knA0jAxmRGE7xPcnev4"
      },
      "updateEquipment": {
        "handler": "src/handlers/equipment.update",
        "events": [
          {
            "http": {
              "path": "equipment/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-updateEquipment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateEquipmentLambdaVersionvpbESFfU8hb0njALtaqMdnkHkJqdtDgUDRjmjxoKcs"
      },
      "updateEquipmentStatus": {
        "handler": "src/handlers/equipment.updateStatus",
        "events": [
          {
            "http": {
              "path": "equipment/{id}/status",
              "method": "patch",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-updateEquipmentStatus",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateEquipmentStatusLambdaVersionwLuOad076Op3BjRJmC40aOjb7F4Cw5FEjrrrbgUMr7U"
      },
      "deployEquipment": {
        "handler": "src/handlers/equipment.deploy",
        "events": [
          {
            "http": {
              "path": "equipment/deploy",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-deployEquipment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeployEquipmentLambdaVersiongyShhlc3Wo29gl3NXiePdxqRZW1Z63TliBNmLWM5A8"
      },
      "returnEquipment": {
        "handler": "src/handlers/equipment.return",
        "events": [
          {
            "http": {
              "path": "equipment/return",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-returnEquipment",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "ReturnEquipmentLambdaVersionFc3Lk11qtpNfQNkPsEPwHsCKh9olZdb55JEwfJ7BdoU"
      },
      "getUploadUrl": {
        "handler": "src/handlers/photos.getUploadUrl",
        "events": [
          {
            "http": {
              "path": "photos/upload-url",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getUploadUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetUploadUrlLambdaVersionk1fCMsqxuUrtbnV5MIxek4WPcHgxqNJB3OE38HZJvgc"
      },
      "getPhotoUrl": {
        "handler": "src/handlers/photos.getPhotoUrl",
        "events": [
          {
            "http": {
              "path": "photos/{key}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getPhotoUrl",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetPhotoUrlLambdaVersionA8o5SLG7kpwTPvTC6v00fhLDf1iPqW4rT7tIGjmKbU"
      },
      "deletePhoto": {
        "handler": "src/handlers/photos.delete",
        "events": [
          {
            "http": {
              "path": "photos/{key}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-deletePhoto",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeletePhotoLambdaVersionBXYPfXB4OFhs5dv4BKOrrMMzGvVZ0b4tzgN0o8Q3M"
      },
      "getContacts": {
        "handler": "src/handlers/contacts.list",
        "events": [
          {
            "http": {
              "path": "contacts",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getContacts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetContactsLambdaVersionCxY5a2NWQ55dCjjAUCG6ZmPJ0Ju4ZV9l5L8zYwZyk"
      },
      "getContact": {
        "handler": "src/handlers/contacts.get",
        "events": [
          {
            "http": {
              "path": "contacts/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getContact",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetContactLambdaVersionaGuUcMWkRrnCkBtWpHEo8RDTFWPt3P0J7BROcaCYo"
      },
      "createContact": {
        "handler": "src/handlers/contacts.create",
        "events": [
          {
            "http": {
              "path": "contacts",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-createContact",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateContactLambdaVersionhBPpFAXJtfkBy7va0JHNiPMsLTH9xDUtVJ7M6T818"
      },
      "updateContact": {
        "handler": "src/handlers/contacts.update",
        "events": [
          {
            "http": {
              "path": "contacts/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-updateContact",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "UpdateContactLambdaVersionNekSDymmIbR4NmR8AXtLnb5I6n4QmF0BbUcCWNy0"
      },
      "deleteContact": {
        "handler": "src/handlers/contacts.delete",
        "events": [
          {
            "http": {
              "path": "contacts/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-deleteContact",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "DeleteContactLambdaVersionWCKtrq5oG13AMNY2N9uEZAyqiwclsumNPuUZpqK470"
      },
      "getClients": {
        "handler": "src/handlers/clients.list",
        "events": [
          {
            "http": {
              "path": "clients",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-getClients",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "GetClientsLambdaVersionngOKZ57FkzuvIxRnZXUk6sRugTVuoQgurYe2HQT840"
      },
      "createClient": {
        "handler": "src/handlers/clients.create",
        "events": [
          {
            "http": {
              "path": "clients",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-createClient",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "CreateClientLambdaVersion7ramgQfj1Y8MlrUHwjgURHJJSob1GjWHNfmrgZatAqU"
      },
      "exportData": {
        "handler": "src/handlers/export.exportData",
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "export/{type}",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-exportData",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "ExportDataLambdaVersionXzkMBR5ukQUgr78oDU90ksdykJO8EPsGv61uKBbjhQ"
      },
      "importData": {
        "handler": "src/handlers/import.importData",
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "import/{type}",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-importData",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "ImportDataLambdaVersionZsKpMh4yhIFEHLellbb15JBlnTJrTRF6I3hqHVAA"
      },
      "listJobPhotos": {
        "handler": "src/handlers/photos.listJobPhotos",
        "events": [
          {
            "http": {
              "path": "jobs/{id}/photos",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "rigup-backend-dev-listJobPhotos",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs16.x",
        "vpc": {},
        "versionLogicalId": "ListJobPhotosLambdaVersionJ8GGbLtH2VlEdONghEsUHDxyXqmzXctnJT8F9TwP4Rs"
      }
    },
    "resources": {
      "Resources": {
        "StorageBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "rigup-backend-storage-dev-571066102634",
            "VersioningConfiguration": {
              "Status": "Enabled"
            },
            "LifecycleConfiguration": {
              "Rules": [
                {
                  "Id": "MoveToIA",
                  "Status": "Enabled",
                  "Transitions": [
                    {
                      "StorageClass": "STANDARD_IA",
                      "TransitionInDays": 30
                    }
                  ]
                },
                {
                  "Id": "MoveToGlacier",
                  "Status": "Enabled",
                  "Transitions": [
                    {
                      "StorageClass": "GLACIER",
                      "TransitionInDays": 90
                    }
                  ]
                },
                {
                  "Id": "DeleteOldVersions",
                  "Status": "Enabled",
                  "NoncurrentVersionExpirationInDays": 365
                }
              ]
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "PhotosBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "rigup-backend-photos-dev-571066102634",
            "LifecycleConfiguration": {
              "Rules": [
                {
                  "Id": "MovePhotosToIA",
                  "Status": "Enabled",
                  "Transitions": [
                    {
                      "StorageClass": "STANDARD_IA",
                      "TransitionInDays": 60
                    }
                  ]
                }
              ]
            },
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "JobsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "rigup-backend-jobs-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "client",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "status-index",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "client-index",
                "KeySchema": [
                  {
                    "AttributeName": "client",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "DiagramsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "rigup-backend-diagrams-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "jobId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "jobId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "StreamSpecification": {
              "StreamViewType": "NEW_AND_OLD_IMAGES"
            },
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "EquipmentTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "rigup-backend-equipment-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "equipmentId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "status",
                "AttributeType": "S"
              },
              {
                "AttributeName": "jobId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "equipmentId-index",
                "KeySchema": [
                  {
                    "AttributeName": "equipmentId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              },
              {
                "IndexName": "status-index",
                "KeySchema": [
                  {
                    "AttributeName": "status",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "KEYS_ONLY"
                }
              },
              {
                "IndexName": "jobId-index",
                "KeySchema": [
                  {
                    "AttributeName": "jobId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "PointInTimeRecoverySpecification": {
              "PointInTimeRecoveryEnabled": true
            },
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "ContactsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "rigup-backend-contacts-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "type",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "type-index",
                "KeySchema": [
                  {
                    "AttributeName": "type",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "ClientsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "rigup-backend-clients-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "name",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "name-index",
                "KeySchema": [
                  {
                    "AttributeName": "name",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        },
        "DeploymentsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "rigup-backend-deployments-dev",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "jobId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "jobId-index",
                "KeySchema": [
                  {
                    "AttributeName": "jobId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "Tags": [
              {
                "Key": "Environment",
                "Value": "dev"
              }
            ]
          }
        }
      },
      "Outputs": {
        "ApiGatewayUrl": {
          "Description": "API Gateway URL",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "ApiGatewayRestApi"
                },
                ".execute-api.",
                "us-east-1",
                ".amazonaws.com/",
                "dev"
              ]
            ]
          },
          "Export": {
            "Name": "rigup-backend-dev-ApiGatewayUrl"
          }
        },
        "StorageBucketName": {
          "Description": "Storage bucket name",
          "Value": {
            "Ref": "StorageBucket"
          },
          "Export": {
            "Name": "rigup-backend-dev-StorageBucket"
          }
        },
        "PhotosBucketName": {
          "Description": "Photos bucket name",
          "Value": {
            "Ref": "PhotosBucket"
          },
          "Export": {
            "Name": "rigup-backend-dev-PhotosBucket"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "rigup-backend",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/home/q/Downloads/well-rig-visualizer-main/rigup-v2/backend-aws/.serverless/rigup-backend.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/rigup-backend/dev/1756504065831-2025-08-29T21:47:45.831Z",
    "artifact": "rigup-backend.zip"
  }
}