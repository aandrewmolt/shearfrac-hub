{
  "/home/q/Downloads/well-rig-visualizer-main/rigup-v2/backend-aws/serverless.yml": {
    "versionFramework": "4.18.2",
    "servicePath": "/home/q/Downloads/well-rig-visualizer-main/rigup-v2/backend-aws/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "rigup-backend",
      "custom": {
        "serverless-offline": {
          "httpPort": 3001
        }
      },
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "stage": "${opt:stage, 'dev'}",
        "region": "us-east-1",
        "apiGateway": {
          "binaryMediaTypes": [
            "image/*",
            "application/pdf"
          ],
          "minimumCompressionSize": 1024
        },
        "environment": {
          "STAGE": "${self:provider.stage}",
          "REGION": "${self:provider.region}",
          "JOBS_TABLE": "${self:service}-jobs-${self:provider.stage}",
          "DIAGRAMS_TABLE": "${self:service}-diagrams-${self:provider.stage}",
          "EQUIPMENT_TABLE": "${self:service}-equipment-${self:provider.stage}",
          "CONTACTS_TABLE": "${self:service}-contacts-${self:provider.stage}",
          "CLIENTS_TABLE": "${self:service}-clients-${self:provider.stage}",
          "DEPLOYMENTS_TABLE": "${self:service}-deployments-${self:provider.stage}",
          "STORAGE_BUCKET": "${self:service}-storage-${self:provider.stage}-${aws:accountId}",
          "PHOTOS_BUCKET": "${self:service}-photos-${self:provider.stage}-${aws:accountId}"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "dynamodb:Query",
              "dynamodb:Scan",
              "dynamodb:GetItem",
              "dynamodb:PutItem",
              "dynamodb:UpdateItem",
              "dynamodb:DeleteItem",
              "dynamodb:BatchGetItem",
              "dynamodb:BatchWriteItem"
            ],
            "Resource": [
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}/index/*",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIAGRAMS_TABLE}",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}/index/*",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/*",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}/index/*",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPLOYMENTS_TABLE}",
              "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPLOYMENTS_TABLE}/index/*"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObject",
              "s3:PutObject",
              "s3:DeleteObject",
              "s3:ListBucket"
            ],
            "Resource": [
              "arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*",
              "arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*",
              "arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}",
              "arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}"
            ]
          },
          {
            "Effect": "Allow",
            "Action": [
              "s3:GetObjectAcl",
              "s3:PutObjectAcl"
            ],
            "Resource": [
              "arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*",
              "arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*"
            ]
          }
        ]
      },
      "functions": {
        "healthCheck": {
          "handler": "src/handlers/health.check",
          "events": [
            {
              "http": {
                "path": "health",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>"
                }
              }
            },
            {
              "http": {
                "path": "health",
                "method": "options",
                "cors": {
                  "origin": "*",
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token"
                  ],
                  "allowCredentials": "<REDACTED>"
                }
              }
            }
          ]
        },
        "getJobs": {
          "handler": "src/handlers/jobs.list",
          "events": [
            {
              "http": {
                "path": "jobs",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "getJob": {
          "handler": "src/handlers/jobs.get",
          "events": [
            {
              "http": {
                "path": "jobs/{id}",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "createJob": {
          "handler": "src/handlers/jobs.create",
          "events": [
            {
              "http": {
                "path": "jobs",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "updateJob": {
          "handler": "src/handlers/jobs.update",
          "events": [
            {
              "http": {
                "path": "jobs/{id}",
                "method": "put",
                "cors": true
              }
            }
          ]
        },
        "deleteJob": {
          "handler": "src/handlers/jobs.delete",
          "events": [
            {
              "http": {
                "path": "jobs/{id}",
                "method": "delete",
                "cors": true
              }
            }
          ]
        },
        "getDiagram": {
          "handler": "src/handlers/diagrams.get",
          "events": [
            {
              "http": {
                "path": "jobs/{id}/diagram",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "saveDiagram": {
          "handler": "src/handlers/diagrams.save",
          "events": [
            {
              "http": {
                "path": "jobs/{id}/diagram",
                "method": "put",
                "cors": true
              }
            }
          ]
        },
        "getEquipment": {
          "handler": "src/handlers/equipment.list",
          "events": [
            {
              "http": {
                "path": "equipment",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "getEquipmentItem": {
          "handler": "src/handlers/equipment.get",
          "events": [
            {
              "http": {
                "path": "equipment/{id}",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "createEquipment": {
          "handler": "src/handlers/equipment.create",
          "events": [
            {
              "http": {
                "path": "equipment",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "updateEquipment": {
          "handler": "src/handlers/equipment.update",
          "events": [
            {
              "http": {
                "path": "equipment/{id}",
                "method": "put",
                "cors": true
              }
            }
          ]
        },
        "updateEquipmentStatus": {
          "handler": "src/handlers/equipment.updateStatus",
          "events": [
            {
              "http": {
                "path": "equipment/{id}/status",
                "method": "patch",
                "cors": true
              }
            }
          ]
        },
        "deployEquipment": {
          "handler": "src/handlers/equipment.deploy",
          "events": [
            {
              "http": {
                "path": "equipment/deploy",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "returnEquipment": {
          "handler": "src/handlers/equipment.return",
          "events": [
            {
              "http": {
                "path": "equipment/return",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "getUploadUrl": {
          "handler": "src/handlers/photos.getUploadUrl",
          "events": [
            {
              "http": {
                "path": "photos/upload-url",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "getPhotoUrl": {
          "handler": "src/handlers/photos.getPhotoUrl",
          "events": [
            {
              "http": {
                "path": "photos/{key}",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "deletePhoto": {
          "handler": "src/handlers/photos.delete",
          "events": [
            {
              "http": {
                "path": "photos/{key}",
                "method": "delete",
                "cors": true
              }
            }
          ]
        },
        "getContacts": {
          "handler": "src/handlers/contacts.list",
          "events": [
            {
              "http": {
                "path": "contacts",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "getContact": {
          "handler": "src/handlers/contacts.get",
          "events": [
            {
              "http": {
                "path": "contacts/{id}",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "createContact": {
          "handler": "src/handlers/contacts.create",
          "events": [
            {
              "http": {
                "path": "contacts",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "updateContact": {
          "handler": "src/handlers/contacts.update",
          "events": [
            {
              "http": {
                "path": "contacts/{id}",
                "method": "put",
                "cors": true
              }
            }
          ]
        },
        "deleteContact": {
          "handler": "src/handlers/contacts.delete",
          "events": [
            {
              "http": {
                "path": "contacts/{id}",
                "method": "delete",
                "cors": true
              }
            }
          ]
        },
        "getClients": {
          "handler": "src/handlers/clients.list",
          "events": [
            {
              "http": {
                "path": "clients",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "createClient": {
          "handler": "src/handlers/clients.create",
          "events": [
            {
              "http": {
                "path": "clients",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "exportData": {
          "handler": "src/handlers/export.exportData",
          "timeout": 30,
          "events": [
            {
              "http": {
                "path": "export/{type}",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "importData": {
          "handler": "src/handlers/import.importData",
          "timeout": 30,
          "events": [
            {
              "http": {
                "path": "import/{type}",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "listJobPhotos": {
          "handler": "src/handlers/photos.listJobPhotos",
          "events": [
            {
              "http": {
                "path": "jobs/{id}/photos",
                "method": "get",
                "cors": true
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "StorageBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "${self:provider.environment.STORAGE_BUCKET}",
              "VersioningConfiguration": {
                "Status": "Enabled"
              },
              "LifecycleConfiguration": {
                "Rules": [
                  {
                    "Id": "MoveToIA",
                    "Status": "Enabled",
                    "Transitions": [
                      {
                        "StorageClass": "STANDARD_IA",
                        "TransitionInDays": 30
                      }
                    ]
                  },
                  {
                    "Id": "MoveToGlacier",
                    "Status": "Enabled",
                    "Transitions": [
                      {
                        "StorageClass": "GLACIER",
                        "TransitionInDays": 90
                      }
                    ]
                  },
                  {
                    "Id": "DeleteOldVersions",
                    "Status": "Enabled",
                    "NoncurrentVersionExpirationInDays": 365
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "PhotosBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "${self:provider.environment.PHOTOS_BUCKET}",
              "LifecycleConfiguration": {
                "Rules": [
                  {
                    "Id": "MovePhotosToIA",
                    "Status": "Enabled",
                    "Transitions": [
                      {
                        "StorageClass": "STANDARD_IA",
                        "TransitionInDays": 60
                      }
                    ]
                  }
                ]
              },
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "JobsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:provider.environment.JOBS_TABLE}",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "client",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "status-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "client-index",
                  "KeySchema": [
                    {
                      "AttributeName": "client",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "${self:provider.stage}"
                }
              ]
            }
          },
          "DiagramsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:provider.environment.DIAGRAMS_TABLE}",
              "AttributeDefinitions": [
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "jobId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "StreamSpecification": {
                "StreamViewType": "NEW_AND_OLD_IMAGES"
              },
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "${self:provider.stage}"
                }
              ]
            }
          },
          "EquipmentTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:provider.environment.EQUIPMENT_TABLE}",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "equipmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "status",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "equipmentId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "equipmentId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                },
                {
                  "IndexName": "status-index",
                  "KeySchema": [
                    {
                      "AttributeName": "status",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "KEYS_ONLY"
                  }
                },
                {
                  "IndexName": "jobId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "jobId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "PointInTimeRecoverySpecification": {
                "PointInTimeRecoveryEnabled": true
              },
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "${self:provider.stage}"
                }
              ]
            }
          },
          "ContactsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:provider.environment.CONTACTS_TABLE}",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "type",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "type-index",
                  "KeySchema": [
                    {
                      "AttributeName": "type",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "${self:provider.stage}"
                }
              ]
            }
          },
          "ClientsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:provider.environment.CLIENTS_TABLE}",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "name",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "name-index",
                  "KeySchema": [
                    {
                      "AttributeName": "name",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "${self:provider.stage}"
                }
              ]
            }
          },
          "DeploymentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:provider.environment.DEPLOYMENTS_TABLE}",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "jobId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "jobId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "jobId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "Tags": [
                {
                  "Key": "Environment",
                  "Value": "${self:provider.stage}"
                }
              ]
            }
          }
        },
        "Outputs": {
          "ApiGatewayUrl": {
            "Description": "API Gateway URL",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  "${self:provider.region}",
                  ".amazonaws.com/",
                  "${self:provider.stage}"
                ]
              ]
            },
            "Export": {
              "Name": "${self:service}-${self:provider.stage}-ApiGatewayUrl"
            }
          },
          "StorageBucketName": {
            "Description": "Storage bucket name",
            "Value": {
              "Ref": "StorageBucket"
            },
            "Export": {
              "Name": "${self:service}-${self:provider.stage}-StorageBucket"
            }
          },
          "PhotosBucketName": {
            "Description": "Photos bucket name",
            "Value": {
              "Ref": "PhotosBucket"
            },
            "Export": {
              "Name": "${self:service}-${self:provider.stage}-PhotosBucket"
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs16.x",
      "stage": "${opt:stage, 'dev'}",
      "region": "us-east-1",
      "apiGateway": {
        "binaryMediaTypes": [
          "image/*",
          "application/pdf"
        ],
        "minimumCompressionSize": 1024
      },
      "environment": {
        "STAGE": "${self:provider.stage}",
        "REGION": "${self:provider.region}",
        "JOBS_TABLE": "${self:service}-jobs-${self:provider.stage}",
        "DIAGRAMS_TABLE": "${self:service}-diagrams-${self:provider.stage}",
        "EQUIPMENT_TABLE": "${self:service}-equipment-${self:provider.stage}",
        "CONTACTS_TABLE": "${self:service}-contacts-${self:provider.stage}",
        "CLIENTS_TABLE": "${self:service}-clients-${self:provider.stage}",
        "DEPLOYMENTS_TABLE": "${self:service}-deployments-${self:provider.stage}",
        "STORAGE_BUCKET": "${self:service}-storage-${self:provider.stage}-${aws:accountId}",
        "PHOTOS_BUCKET": "${self:service}-photos-${self:provider.stage}-${aws:accountId}"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}/index/*",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIAGRAMS_TABLE}",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}/index/*",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/*",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}/index/*",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPLOYMENTS_TABLE}",
            "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPLOYMENTS_TABLE}/index/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:ListBucket"
          ],
          "Resource": [
            "arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*",
            "arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*",
            "arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}",
            "arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:GetObjectAcl",
            "s3:PutObjectAcl"
          ],
          "Resource": [
            "arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*",
            "arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*"
          ]
        }
      ]
    },
    "error": {
      "message": "You must sign in or use a license key with Serverless Framework V.4 and later versions. Please use \"serverless login\".",
      "stack": "Error: You must sign in or use a license key with Serverless Framework V.4 and later versions. Please use \"serverless login\".\n    at Authentication.getAuthenticatedData (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:806:10899)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Authentication.authenticate (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:808:22245)\n    at async TraditionalRunner.resolveVariablesAndAuthenticate (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:812:2379)\n    at async TraditionalRunner.run (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:1428:27914)\n    at async route (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:1603:2878)\n    at async Object.run (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:1604:3661)\n    at async run2 (file:///home/q/.serverless/releases/4.18.2/package/dist/sf-core.js:1604:4815)"
    },
    "serviceRawFile": "service: rigup-backend\n\n\ncustom:\n  serverless-offline:\n    httpPort: 3001\n\nprovider:\n  name: aws\n  runtime: nodejs16.x\n  stage: ${opt:stage, 'dev'}\n  region: ${opt:region, 'us-east-1'}\n  \n  # API Gateway configuration with caching\n  apiGateway:\n    binaryMediaTypes:\n      - 'image/*'\n      - 'application/pdf'\n    minimumCompressionSize: 1024\n    # Enable caching to reduce costs\n  \n  environment:\n    STAGE: ${self:provider.stage}\n    REGION: ${self:provider.region}\n    # DynamoDB Tables\n    JOBS_TABLE: ${self:service}-jobs-${self:provider.stage}\n    DIAGRAMS_TABLE: ${self:service}-diagrams-${self:provider.stage}\n    EQUIPMENT_TABLE: ${self:service}-equipment-${self:provider.stage}\n    CONTACTS_TABLE: ${self:service}-contacts-${self:provider.stage}\n    CLIENTS_TABLE: ${self:service}-clients-${self:provider.stage}\n    DEPLOYMENTS_TABLE: ${self:service}-deployments-${self:provider.stage}\n    # S3 Buckets (with account ID for uniqueness)\n    STORAGE_BUCKET: ${self:service}-storage-${self:provider.stage}-${aws:accountId}\n    PHOTOS_BUCKET: ${self:service}-photos-${self:provider.stage}-${aws:accountId}\n  \n  # IAM permissions for Lambda functions\n  iamRoleStatements:\n    # DynamoDB permissions\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n        - dynamodb:BatchGetItem\n        - dynamodb:BatchWriteItem\n      Resource:\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}/index/*\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIAGRAMS_TABLE}\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EQUIPMENT_TABLE}/index/*\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/*\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CLIENTS_TABLE}/index/*\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPLOYMENTS_TABLE}\"\n        - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DEPLOYMENTS_TABLE}/index/*\"\n    \n    # S3 permissions\n    - Effect: Allow\n      Action:\n        - s3:GetObject\n        - s3:PutObject\n        - s3:DeleteObject\n        - s3:ListBucket\n      Resource:\n        - \"arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*\"\n        - \"arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*\"\n        - \"arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}\"\n        - \"arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}\"\n    \n    # S3 signed URL permissions\n    - Effect: Allow\n      Action:\n        - s3:GetObjectAcl\n        - s3:PutObjectAcl\n      Resource:\n        - \"arn:aws:s3:::${self:provider.environment.STORAGE_BUCKET}/*\"\n        - \"arn:aws:s3:::${self:provider.environment.PHOTOS_BUCKET}/*\"\n\nfunctions:\n  # Health check endpoint\n  healthCheck:\n    handler: src/handlers/health.check\n    events:\n      - http:\n          path: health\n          method: get\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: true\n      - http:\n          path: health\n          method: options\n          cors:\n            origin: '*'\n            headers:\n              - Content-Type\n              - X-Amz-Date\n              - Authorization\n              - X-Api-Key\n              - X-Amz-Security-Token\n            allowCredentials: true\n\n  # Jobs endpoints\n  getJobs:\n    handler: src/handlers/jobs.list\n    events:\n      - http:\n          path: jobs\n          method: get\n          cors: true\n  \n  getJob:\n    handler: src/handlers/jobs.get\n    events:\n      - http:\n          path: jobs/{id}\n          method: get\n          cors: true\n  \n  createJob:\n    handler: src/handlers/jobs.create\n    events:\n      - http:\n          path: jobs\n          method: post\n          cors: true\n  \n  updateJob:\n    handler: src/handlers/jobs.update\n    events:\n      - http:\n          path: jobs/{id}\n          method: put\n          cors: true\n  \n  deleteJob:\n    handler: src/handlers/jobs.delete\n    events:\n      - http:\n          path: jobs/{id}\n          method: delete\n          cors: true\n  \n  # Diagram endpoints (stored in DynamoDB with S3 backup)\n  getDiagram:\n    handler: src/handlers/diagrams.get\n    events:\n      - http:\n          path: jobs/{id}/diagram\n          method: get\n          cors: true\n  \n  saveDiagram:\n    handler: src/handlers/diagrams.save\n    events:\n      - http:\n          path: jobs/{id}/diagram\n          method: put\n          cors: true\n  \n  # Equipment endpoints\n  getEquipment:\n    handler: src/handlers/equipment.list\n    events:\n      - http:\n          path: equipment\n          method: get\n          cors: true\n  \n  getEquipmentItem:\n    handler: src/handlers/equipment.get\n    events:\n      - http:\n          path: equipment/{id}\n          method: get\n          cors: true\n  \n  createEquipment:\n    handler: src/handlers/equipment.create\n    events:\n      - http:\n          path: equipment\n          method: post\n          cors: true\n  \n  updateEquipment:\n    handler: src/handlers/equipment.update\n    events:\n      - http:\n          path: equipment/{id}\n          method: put\n          cors: true\n  \n  updateEquipmentStatus:\n    handler: src/handlers/equipment.updateStatus\n    events:\n      - http:\n          path: equipment/{id}/status\n          method: patch\n          cors: true\n  \n  deployEquipment:\n    handler: src/handlers/equipment.deploy\n    events:\n      - http:\n          path: equipment/deploy\n          method: post\n          cors: true\n  \n  returnEquipment:\n    handler: src/handlers/equipment.return\n    events:\n      - http:\n          path: equipment/return\n          method: post\n          cors: true\n  \n  # Photo upload endpoints (using S3)\n  getUploadUrl:\n    handler: src/handlers/photos.getUploadUrl\n    events:\n      - http:\n          path: photos/upload-url\n          method: post\n          cors: true\n  \n  getPhotoUrl:\n    handler: src/handlers/photos.getPhotoUrl\n    events:\n      - http:\n          path: photos/{key}\n          method: get\n          cors: true\n  \n  deletePhoto:\n    handler: src/handlers/photos.delete\n    events:\n      - http:\n          path: photos/{key}\n          method: delete\n          cors: true\n  \n  # Contacts endpoints\n  getContacts:\n    handler: src/handlers/contacts.list\n    events:\n      - http:\n          path: contacts\n          method: get\n          cors: true\n  \n  getContact:\n    handler: src/handlers/contacts.get\n    events:\n      - http:\n          path: contacts/{id}\n          method: get\n          cors: true\n  \n  createContact:\n    handler: src/handlers/contacts.create\n    events:\n      - http:\n          path: contacts\n          method: post\n          cors: true\n  \n  updateContact:\n    handler: src/handlers/contacts.update\n    events:\n      - http:\n          path: contacts/{id}\n          method: put\n          cors: true\n  \n  deleteContact:\n    handler: src/handlers/contacts.delete\n    events:\n      - http:\n          path: contacts/{id}\n          method: delete\n          cors: true\n  \n  # Clients endpoints\n  getClients:\n    handler: src/handlers/clients.list\n    events:\n      - http:\n          path: clients\n          method: get\n          cors: true\n  \n  createClient:\n    handler: src/handlers/clients.create\n    events:\n      - http:\n          path: clients\n          method: post\n          cors: true\n  \n  # Export/Import endpoints (using S3)\n  exportData:\n    handler: src/handlers/export.exportData\n    timeout: 30\n    events:\n      - http:\n          path: export/{type}\n          method: post\n          cors: true\n  \n  importData:\n    handler: src/handlers/import.importData\n    timeout: 30\n    events:\n      - http:\n          path: import/{type}\n          method: post\n          cors: true\n  \n  listJobPhotos:\n    handler: src/handlers/photos.listJobPhotos\n    events:\n      - http:\n          path: jobs/{id}/photos\n          method: get\n          cors: true\n  \n\nresources:\n  Resources:\n    # S3 Buckets\n    StorageBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.STORAGE_BUCKET}\n        VersioningConfiguration:\n          Status: Enabled\n        LifecycleConfiguration:\n          Rules:\n            # Move to Standard-IA after 30 days\n            - Id: MoveToIA\n              Status: Enabled\n              Transitions:\n                - StorageClass: STANDARD_IA\n                  TransitionInDays: 30\n            # Move to Glacier after 90 days\n            - Id: MoveToGlacier\n              Status: Enabled\n              Transitions:\n                - StorageClass: GLACIER\n                  TransitionInDays: 90\n            # Delete old versions after 365 days\n            - Id: DeleteOldVersions\n              Status: Enabled\n              NoncurrentVersionExpirationInDays: 365\n        CorsConfiguration:\n          CorsRules:\n            - AllowedOrigins:\n                - '*'\n              AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - GET\n                - PUT\n                - POST\n                - DELETE\n                - HEAD\n              MaxAge: 3000\n    \n    PhotosBucket:\n      Type: AWS::S3::Bucket\n      Properties:\n        BucketName: ${self:provider.environment.PHOTOS_BUCKET}\n        LifecycleConfiguration:\n          Rules:\n            # Photos move to IA after 60 days\n            - Id: MovePhotosToIA\n              Status: Enabled\n              Transitions:\n                - StorageClass: STANDARD_IA\n                  TransitionInDays: 60\n        CorsConfiguration:\n          CorsRules:\n            - AllowedOrigins:\n                - '*'\n              AllowedHeaders:\n                - '*'\n              AllowedMethods:\n                - GET\n                - PUT\n                - POST\n                - DELETE\n                - HEAD\n              MaxAge: 3000\n    \n    #     # CloudFront Distribution (commented out for initial deployment)\n    #     # CloudFrontDistribution:\n    #     #   Type: AWS::CloudFront::Distribution\n    #       Properties:\n    #         DistributionConfig:\n    #           Comment: RigUp API Distribution\n    #           Enabled: true\n    #           PriceClass: PriceClass_100  # Use only North America and Europe edge locations\n    #           HttpVersion: http2\n    #           Origins:\n    #             # API Gateway origin\n    #             - Id: ApiGateway\n    #               DomainName:\n    #                 Fn::Join:\n    #                   - ''\n    #                   - - Ref: ApiGatewayRestApi\n    #                     - '.execute-api.'\n    #                     - ${self:provider.region}\n    #                     - '.amazonaws.com'\n    #               OriginPath: /${self:provider.stage}\n    #               CustomOriginConfig:\n    #                 HTTPPort: 80\n    #                 HTTPSPort: 443\n    #                 OriginProtocolPolicy: https-only\n    #             # S3 Storage origin\n    #             - Id: S3Storage\n    #               DomainName:\n    #                 Fn::GetAtt: [StorageBucket, RegionalDomainName]\n    #               S3OriginConfig:\n    #                 OriginAccessIdentity:\n    #                   Fn::Join:\n    #                     - ''\n    #                     - - 'origin-access-identity/cloudfront/'\n    #                       - Ref: CloudFrontOriginAccessIdentity\n    #             # S3 Photos origin\n    #             - Id: S3Photos\n    #               DomainName:\n    #                 Fn::GetAtt: [PhotosBucket, RegionalDomainName]\n    #               S3OriginConfig:\n    #                 OriginAccessIdentity:\n    #                   Fn::Join:\n    #                     - ''\n    #                     - - 'origin-access-identity/cloudfront/'\n    #                       - Ref: CloudFrontOriginAccessIdentity\n    #           DefaultCacheBehavior:\n    #             TargetOriginId: ApiGateway\n    #             ViewerProtocolPolicy: redirect-to-https\n    #             AllowedMethods:\n    #               - GET\n    #               - HEAD\n    #               - OPTIONS\n    #               - PUT\n    #               - POST\n    #               - PATCH\n    #               - DELETE\n    #             CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Disabled caching for API\n    #             OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin\n    #             ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # SecurityHeadersPolicy\n    #           CacheBehaviors:\n    #             # Cache static files from S3\n    #             - PathPattern: /storage/*\n    #               TargetOriginId: S3Storage\n    #               ViewerProtocolPolicy: redirect-to-https\n    #               CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized\n    #               OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf\n    #             - PathPattern: /photos/*\n    #               TargetOriginId: S3Photos\n    #               ViewerProtocolPolicy: redirect-to-https\n    #               CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6\n    #               OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf\n    #             # Cache GET requests for equipment and contacts\n    #             - PathPattern: /equipment\n    #               TargetOriginId: ApiGateway\n    #               ViewerProtocolPolicy: redirect-to-https\n    #               AllowedMethods: [GET, HEAD, OPTIONS]\n    #               CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6\n    #               OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf\n    #             - PathPattern: /contacts\n    #               TargetOriginId: ApiGateway\n    #               ViewerProtocolPolicy: redirect-to-https\n    #               AllowedMethods: [GET, HEAD, OPTIONS]\n    #               CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6\n    #               OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf\n    #     \n    #     CloudFrontOriginAccessIdentity:\n    #       Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n    #       Properties:\n    #         CloudFrontOriginAccessIdentityConfig:\n    #           Comment: OAI for RigUp S3 buckets\n    #     \n    # DynamoDB Tables with cost optimization\n    JobsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.JOBS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: status\n            AttributeType: S\n          - AttributeName: client\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: status-index\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n          - IndexName: client-index\n            KeySchema:\n              - AttributeName: client\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        # Use On-Demand billing for cost optimization\n        BillingMode: PAY_PER_REQUEST\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n    \n    DiagramsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.DIAGRAMS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: jobId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: jobId\n            KeyType: HASH\n        BillingMode: PAY_PER_REQUEST\n        StreamSpecification:\n          StreamViewType: NEW_AND_OLD_IMAGES\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n    \n    EquipmentTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.EQUIPMENT_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: equipmentId\n            AttributeType: S\n          - AttributeName: status\n            AttributeType: S\n          - AttributeName: jobId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: equipmentId-index\n            KeySchema:\n              - AttributeName: equipmentId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n          - IndexName: status-index\n            KeySchema:\n              - AttributeName: status\n                KeyType: HASH\n            Projection:\n              ProjectionType: KEYS_ONLY\n          - IndexName: jobId-index\n            KeySchema:\n              - AttributeName: jobId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        PointInTimeRecoverySpecification:\n          PointInTimeRecoveryEnabled: true\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n    \n    ContactsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.CONTACTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: type\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: type-index\n            KeySchema:\n              - AttributeName: type\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n    \n    ClientsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.CLIENTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: name\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: name-index\n            KeySchema:\n              - AttributeName: name\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n    \n    DeploymentsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: ${self:provider.environment.DEPLOYMENTS_TABLE}\n        AttributeDefinitions:\n          - AttributeName: id\n            AttributeType: S\n          - AttributeName: jobId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: id\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: jobId-index\n            KeySchema:\n              - AttributeName: jobId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n        BillingMode: PAY_PER_REQUEST\n        Tags:\n          - Key: Environment\n            Value: ${self:provider.stage}\n\n  Outputs:\n    # CloudFrontDomainName (commented out since CloudFront is disabled for initial deployment)\n    # CloudFrontDomainName:\n    #   Description: CloudFront distribution domain name\n    #   Value:\n    #     Fn::GetAtt: [CloudFrontDistribution, DomainName]\n    #   Export:\n    #     Name: ${self:service}-${self:provider.stage}-CloudFrontDomain\n    \n    ApiGatewayUrl:\n      Description: API Gateway URL\n      Value:\n        Fn::Join:\n          - ''\n          - - 'https://'\n            - Ref: ApiGatewayRestApi\n            - '.execute-api.'\n            - ${self:provider.region}\n            - '.amazonaws.com/'\n            - ${self:provider.stage}\n      Export:\n        Name: ${self:service}-${self:provider.stage}-ApiGatewayUrl\n    \n    StorageBucketName:\n      Description: Storage bucket name\n      Value:\n        Ref: StorageBucket\n      Export:\n        Name: ${self:service}-${self:provider.stage}-StorageBucket\n    \n    PhotosBucketName:\n      Description: Photos bucket name\n      Value:\n        Ref: PhotosBucket\n      Export:\n        Name: ${self:service}-${self:provider.stage}-PhotosBucket",
    "command": [
      "deploy"
    ],
    "options": {
      "stage": "prod"
    },
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}