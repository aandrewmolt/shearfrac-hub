{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetEquipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getEquipment"
      }
    },
    "CreateEquipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-createEquipment"
      }
    },
    "GetEquipmentByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getEquipmentById"
      }
    },
    "UpdateEquipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-updateEquipment"
      }
    },
    "DeleteEquipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-deleteEquipment"
      }
    },
    "UpdateEquipmentStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-updateEquipmentStatus"
      }
    },
    "DeployEquipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-deployEquipment"
      }
    },
    "ReturnEquipmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-returnEquipment"
      }
    },
    "GetJobsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getJobs"
      }
    },
    "CreateJobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-createJob"
      }
    },
    "GetJobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getJob"
      }
    },
    "UpdateJobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-updateJob"
      }
    },
    "DeleteJobLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-deleteJob"
      }
    },
    "GetJobDiagramLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getJobDiagram"
      }
    },
    "UpdateJobDiagramLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-updateJobDiagram"
      }
    },
    "GetContactsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getContacts"
      }
    },
    "CreateContactLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-createContact"
      }
    },
    "GetContactLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getContact"
      }
    },
    "UpdateContactLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-updateContact"
      }
    },
    "DeleteContactLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-deleteContact"
      }
    },
    "GetClientsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-getClients"
      }
    },
    "CreateClientLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/rigup-backend-dev-createClient"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "rigup-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rigup-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/rigup-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-jobs-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-jobs-dev/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-diagrams-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-equipment-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-equipment-dev/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-contacts-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-contacts-dev/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-clients-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-clients-dev/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-deployments-dev",
                    "arn:aws:dynamodb:us-east-1:*:table/rigup-backend-deployments-dev/index/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:ListBucket"
                  ],
                  "Resource": [
                    "arn:aws:s3:::rigup-backend-storage-dev/*",
                    "arn:aws:s3:::rigup-backend-photos-dev/*",
                    "arn:aws:s3:::rigup-backend-storage-dev",
                    "arn:aws:s3:::rigup-backend-photos-dev"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "rigup-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetEquipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.list",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getEquipment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEquipmentLogGroup"
      ]
    },
    "CreateEquipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.create",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-createEquipment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateEquipmentLogGroup"
      ]
    },
    "GetEquipmentByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.get",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getEquipmentById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEquipmentByIdLogGroup"
      ]
    },
    "UpdateEquipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.update",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-updateEquipment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEquipmentLogGroup"
      ]
    },
    "DeleteEquipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.delete",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-deleteEquipment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteEquipmentLogGroup"
      ]
    },
    "UpdateEquipmentStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.updateStatus",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-updateEquipmentStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEquipmentStatusLogGroup"
      ]
    },
    "DeployEquipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.deploy",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-deployEquipment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeployEquipmentLogGroup"
      ]
    },
    "ReturnEquipmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/equipment.return",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-returnEquipment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReturnEquipmentLogGroup"
      ]
    },
    "GetJobsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.list",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getJobs",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetJobsLogGroup"
      ]
    },
    "CreateJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.create",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-createJob",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateJobLogGroup"
      ]
    },
    "GetJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.get",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getJob",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetJobLogGroup"
      ]
    },
    "UpdateJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.update",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-updateJob",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateJobLogGroup"
      ]
    },
    "DeleteJobLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.delete",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-deleteJob",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteJobLogGroup"
      ]
    },
    "GetJobDiagramLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.getDiagram",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getJobDiagram",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetJobDiagramLogGroup"
      ]
    },
    "UpdateJobDiagramLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/jobs.updateDiagram",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-updateJobDiagram",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateJobDiagramLogGroup"
      ]
    },
    "GetContactsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/contacts.list",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getContacts",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetContactsLogGroup"
      ]
    },
    "CreateContactLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/contacts.create",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-createContact",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateContactLogGroup"
      ]
    },
    "GetContactLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/contacts.get",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getContact",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetContactLogGroup"
      ]
    },
    "UpdateContactLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/contacts.update",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-updateContact",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateContactLogGroup"
      ]
    },
    "DeleteContactLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/contacts.delete",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-deleteContact",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteContactLogGroup"
      ]
    },
    "GetClientsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/clients.list",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-getClients",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetClientsLogGroup"
      ]
    },
    "CreateClientLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/rigup-backend/dev/1756521766886-2025-08-30T02:42:46.886Z/rigup-backend.zip"
        },
        "Handler": "src/handlers/clients.create",
        "Runtime": "nodejs18.x",
        "FunctionName": "rigup-backend-dev-createClient",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "STAGE": "dev",
            "REGION": "us-east-1",
            "JOBS_TABLE": "rigup-backend-jobs-dev",
            "DIAGRAMS_TABLE": "rigup-backend-diagrams-dev",
            "EQUIPMENT_TABLE": "rigup-backend-equipment-dev",
            "CONTACTS_TABLE": "rigup-backend-contacts-dev",
            "CLIENTS_TABLE": "rigup-backend-clients-dev",
            "DEPLOYMENTS_TABLE": "rigup-backend-deployments-dev",
            "STORAGE_BUCKET": "rigup-backend-storage-dev",
            "PHOTOS_BUCKET": "rigup-backend-photos-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateClientLogGroup"
      ]
    },
    "GetEquipmentLambdaVersionSNLvPt1hh2MPeQfffIjrLVN0KUNSsZQG3fdHfITvE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEquipmentLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "CreateEquipmentLambdaVersiongUmTR25s1ZalAZFGToTklZDweyxvLtHB9cNPt8PGmIc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateEquipmentLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetEquipmentByIdLambdaVersiongmL1OlvhHtKX3oF1m86Lg5Ave4l7OoMnAcwsx5YrwQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEquipmentByIdLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "UpdateEquipmentLambdaVersionMwjHlsUVwbNR0s7ddBpcHqFz9QDPzNkisN0rticpg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEquipmentLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "DeleteEquipmentLambdaVersionZANipcPb7Tmw3y3ISZYE2KyOBs2h8j99ZRaxGU36k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteEquipmentLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "UpdateEquipmentStatusLambdaVersion2dW5Nl8grpEQJ6Mdyj2VjD3i6bxnwiq5PkXansNzw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEquipmentStatusLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "DeployEquipmentLambdaVersionD2iksiXFu7qGem4z2CXUgSffYvTiI7dKAFiG3UIbW0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeployEquipmentLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "ReturnEquipmentLambdaVersiondvT7aHsSe3Q5DHhcvXmGIzx5ZZ7qXddKNtt1Mnbps": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReturnEquipmentLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetJobsLambdaVersionrfwPNTyZDpKHU1VYksBPNNbAKnOgtTGvsdad2ZnN6s": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetJobsLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "CreateJobLambdaVersiondVGg5aEFebfZ1qEE5TcX1VMerx7NQOn7tjnARXP0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateJobLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetJobLambdaVersionTZsM33EWMCguSI9uiBqXtND5GF9h0EDGkAAx5HRiAk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetJobLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "UpdateJobLambdaVersion3YMPyWXTVLX6h0b0eRGgUA0WJggN2hcLvKOOTpiA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateJobLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "DeleteJobLambdaVersionMnk0f5fDN20nVnbuPBs5T36V28ODxOFFEM3m9c1Xg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteJobLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetJobDiagramLambdaVersionH3SGPQHHvbvBqLCGAexVqWYLtC7PGfwrMhp4wOJJuAA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetJobDiagramLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "UpdateJobDiagramLambdaVersionD7D9XeYHWzxWA7odYFamOEMenXSRlZHL3iBwjgCoQwc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateJobDiagramLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetContactsLambdaVersionYkzIpDFhwLnyAfs72S76GGWqWA7m0QmKwmtcv7Wdw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetContactsLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "CreateContactLambdaVersionBhSEYbLP8vvdipIIuq3Ohn694M5cceb4sKDYNTFtnRs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateContactLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetContactLambdaVersion5s7rUTbtBCwGb03UA23Q4fAGGFuJHWu0WB1R88xytU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetContactLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "UpdateContactLambdaVersionMxs4P1j1oGmAYSP48efLFALeFyUqRsFbhXJY1zgk364": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateContactLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "DeleteContactLambdaVersiontKxkSlDXZmvqVZtgudvQ3Tn8g2DI1C9xqq8BjYHNc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteContactLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "GetClientsLambdaVersion7cdGnUB9Ll9R3lqGfi68EfB4q4L48uUDEGmb4bWbdg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetClientsLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "CreateClientLambdaVersionIG6jQ59b6AwPDYvK7xqXr0AOXNCbjyT0ibHHPivvNw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateClientLambdaFunction"
        },
        "CodeSha256": "v7Nsa7K/9d8yVmSh+6dVsYhd6d9nL2dwkjmO1Eqejb4="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-rigup-backend",
        "BinaryMediaTypes": [
          "image/*",
          "application/pdf"
        ],
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": "",
        "MinimumCompressionSize": 1024
      }
    },
    "ApiGatewayResourceEquipment": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "equipment",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEquipmentIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEquipment"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEquipmentIdVarStatus": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEquipmentIdVar"
        },
        "PathPart": "status",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEquipmentDeploy": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEquipment"
        },
        "PathPart": "deploy",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEquipmentReturn": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEquipment"
        },
        "PathPart": "return",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceJobs": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "jobs",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceJobsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceJobs"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceJobsIdVarDiagram": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceJobsIdVar"
        },
        "PathPart": "diagram",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceContacts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "contacts",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceContactsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceContacts"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceClients": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "clients",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEquipmentOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEquipmentIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEquipmentIdVarStatusOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PATCH'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentIdVarStatus"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEquipmentDeployOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentDeploy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEquipmentReturnOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentReturn"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodJobsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodJobsIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodJobsIdVarDiagramOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVarDiagram"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodContactsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceContacts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodContactsIdVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceContactsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodClientsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceClients"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEquipmentGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEquipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEquipmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipment"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateEquipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateEquipmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEquipmentByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEquipmentByIdLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateEquipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateEquipmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteEquipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteEquipmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentIdVarStatusPatch": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PATCH",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentIdVarStatus"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateEquipmentStatusLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateEquipmentStatusLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentDeployPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentDeploy"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeployEquipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeployEquipmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEquipmentReturnPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEquipmentReturn"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ReturnEquipmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ReturnEquipmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetJobsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetJobsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobs"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateJobLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateJobLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetJobLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetJobLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateJobLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateJobLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteJobLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteJobLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsIdVarDiagramGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVarDiagram"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetJobDiagramLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetJobDiagramLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodJobsIdVarDiagramPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceJobsIdVarDiagram"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateJobDiagramLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateJobDiagramLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodContactsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceContacts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetContactsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetContactsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodContactsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceContacts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateContactLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateContactLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodContactsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceContactsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetContactLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetContactLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodContactsIdVarPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceContactsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateContactLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateContactLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodContactsIdVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceContactsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DeleteContactLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DeleteContactLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodClientsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceClients"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetClientsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetClientsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodClientsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceClients"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateClientLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateClientLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1756521761795": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodEquipmentOptions",
        "ApiGatewayMethodEquipmentIdVarOptions",
        "ApiGatewayMethodEquipmentIdVarStatusOptions",
        "ApiGatewayMethodEquipmentDeployOptions",
        "ApiGatewayMethodEquipmentReturnOptions",
        "ApiGatewayMethodJobsOptions",
        "ApiGatewayMethodJobsIdVarOptions",
        "ApiGatewayMethodJobsIdVarDiagramOptions",
        "ApiGatewayMethodContactsOptions",
        "ApiGatewayMethodContactsIdVarOptions",
        "ApiGatewayMethodClientsOptions",
        "ApiGatewayMethodEquipmentGet",
        "ApiGatewayMethodEquipmentPost",
        "ApiGatewayMethodEquipmentIdVarGet",
        "ApiGatewayMethodEquipmentIdVarPut",
        "ApiGatewayMethodEquipmentIdVarDelete",
        "ApiGatewayMethodEquipmentIdVarStatusPatch",
        "ApiGatewayMethodEquipmentDeployPost",
        "ApiGatewayMethodEquipmentReturnPost",
        "ApiGatewayMethodJobsGet",
        "ApiGatewayMethodJobsPost",
        "ApiGatewayMethodJobsIdVarGet",
        "ApiGatewayMethodJobsIdVarPut",
        "ApiGatewayMethodJobsIdVarDelete",
        "ApiGatewayMethodJobsIdVarDiagramGet",
        "ApiGatewayMethodJobsIdVarDiagramPut",
        "ApiGatewayMethodContactsGet",
        "ApiGatewayMethodContactsPost",
        "ApiGatewayMethodContactsIdVarGet",
        "ApiGatewayMethodContactsIdVarPut",
        "ApiGatewayMethodContactsIdVarDelete",
        "ApiGatewayMethodClientsGet",
        "ApiGatewayMethodClientsPost"
      ]
    },
    "ApiGatewayUsagePlanFree": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": "ApiGatewayDeployment1756521761795",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "dev"
          }
        ],
        "Description": "Usage plan \"free\" for rigup-backend dev stage",
        "UsagePlanName": "rigup-backend-free-dev",
        "Quota": {
          "Limit": 1000,
          "Period": "DAY"
        },
        "Throttle": {
          "BurstLimit": 5,
          "RateLimit": 2
        }
      }
    },
    "ApiGatewayUsagePlanPremium": {
      "Type": "AWS::ApiGateway::UsagePlan",
      "DependsOn": "ApiGatewayDeployment1756521761795",
      "Properties": {
        "ApiStages": [
          {
            "ApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Stage": "dev"
          }
        ],
        "Description": "Usage plan \"premium\" for rigup-backend dev stage",
        "UsagePlanName": "rigup-backend-premium-dev",
        "Quota": {
          "Limit": 10000,
          "Period": "DAY"
        },
        "Throttle": {
          "BurstLimit": 20,
          "RateLimit": 10
        }
      }
    },
    "GetEquipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEquipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateEquipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateEquipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetEquipmentByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEquipmentByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateEquipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEquipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteEquipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteEquipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateEquipmentStatusLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEquipmentStatusLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeployEquipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeployEquipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ReturnEquipmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReturnEquipmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetJobsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetJobsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateJobLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateJobLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetJobLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetJobLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateJobLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateJobLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteJobLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteJobLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetJobDiagramLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetJobDiagramLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateJobDiagramLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateJobDiagramLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetContactsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetContactsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateContactLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateContactLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetContactLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetContactLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateContactLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateContactLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DeleteContactLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteContactLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetClientsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetClientsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateClientLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateClientLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ApiGatewayStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "dev",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "DeploymentId": {
          "Ref": "ApiGatewayDeployment"
        },
        "MethodSettings": [
          {
            "ResourcePath": "/*",
            "HttpMethod": "*",
            "ThrottlingBurstLimit": 10,
            "ThrottlingRateLimit": 5,
            "MetricsEnabled": true,
            "DataTraceEnabled": true,
            "LoggingLevel": "INFO"
          }
        ]
      }
    },
    "ApiGatewayThrottleAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName": "rigup-backend-dev-api-throttle",
        "AlarmDescription": "Alert when API Gateway throttling occurs",
        "MetricName": "4XXError",
        "Namespace": "AWS/ApiGateway",
        "Dimensions": [
          {
            "Name": "ApiName",
            "Value": {
              "Ref": "ApiGatewayRestApi"
            }
          },
          {
            "Name": "Stage",
            "Value": "dev"
          }
        ],
        "Statistic": "Sum",
        "Period": 60,
        "EvaluationPeriods": 1,
        "Threshold": 10,
        "ComparisonOperator": "GreaterThanThreshold",
        "TreatMissingData": "notBreaching"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetEquipmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEquipmentLambdaVersionSNLvPt1hh2MPeQfffIjrLVN0KUNSsZQG3fdHfITvE"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetEquipmentLambdaFunctionQualifiedArn"
      }
    },
    "CreateEquipmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateEquipmentLambdaVersiongUmTR25s1ZalAZFGToTklZDweyxvLtHB9cNPt8PGmIc"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-CreateEquipmentLambdaFunctionQualifiedArn"
      }
    },
    "GetEquipmentByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEquipmentByIdLambdaVersiongmL1OlvhHtKX3oF1m86Lg5Ave4l7OoMnAcwsx5YrwQ"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetEquipmentByIdLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEquipmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEquipmentLambdaVersionMwjHlsUVwbNR0s7ddBpcHqFz9QDPzNkisN0rticpg"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-UpdateEquipmentLambdaFunctionQualifiedArn"
      }
    },
    "DeleteEquipmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteEquipmentLambdaVersionZANipcPb7Tmw3y3ISZYE2KyOBs2h8j99ZRaxGU36k"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-DeleteEquipmentLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEquipmentStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEquipmentStatusLambdaVersion2dW5Nl8grpEQJ6Mdyj2VjD3i6bxnwiq5PkXansNzw"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-UpdateEquipmentStatusLambdaFunctionQualifiedArn"
      }
    },
    "DeployEquipmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeployEquipmentLambdaVersionD2iksiXFu7qGem4z2CXUgSffYvTiI7dKAFiG3UIbW0"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-DeployEquipmentLambdaFunctionQualifiedArn"
      }
    },
    "ReturnEquipmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReturnEquipmentLambdaVersiondvT7aHsSe3Q5DHhcvXmGIzx5ZZ7qXddKNtt1Mnbps"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-ReturnEquipmentLambdaFunctionQualifiedArn"
      }
    },
    "GetJobsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetJobsLambdaVersionrfwPNTyZDpKHU1VYksBPNNbAKnOgtTGvsdad2ZnN6s"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetJobsLambdaFunctionQualifiedArn"
      }
    },
    "CreateJobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateJobLambdaVersiondVGg5aEFebfZ1qEE5TcX1VMerx7NQOn7tjnARXP0"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-CreateJobLambdaFunctionQualifiedArn"
      }
    },
    "GetJobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetJobLambdaVersionTZsM33EWMCguSI9uiBqXtND5GF9h0EDGkAAx5HRiAk"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetJobLambdaFunctionQualifiedArn"
      }
    },
    "UpdateJobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateJobLambdaVersion3YMPyWXTVLX6h0b0eRGgUA0WJggN2hcLvKOOTpiA"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-UpdateJobLambdaFunctionQualifiedArn"
      }
    },
    "DeleteJobLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteJobLambdaVersionMnk0f5fDN20nVnbuPBs5T36V28ODxOFFEM3m9c1Xg"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-DeleteJobLambdaFunctionQualifiedArn"
      }
    },
    "GetJobDiagramLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetJobDiagramLambdaVersionH3SGPQHHvbvBqLCGAexVqWYLtC7PGfwrMhp4wOJJuAA"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetJobDiagramLambdaFunctionQualifiedArn"
      }
    },
    "UpdateJobDiagramLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateJobDiagramLambdaVersionD7D9XeYHWzxWA7odYFamOEMenXSRlZHL3iBwjgCoQwc"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-UpdateJobDiagramLambdaFunctionQualifiedArn"
      }
    },
    "GetContactsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetContactsLambdaVersionYkzIpDFhwLnyAfs72S76GGWqWA7m0QmKwmtcv7Wdw"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetContactsLambdaFunctionQualifiedArn"
      }
    },
    "CreateContactLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateContactLambdaVersionBhSEYbLP8vvdipIIuq3Ohn694M5cceb4sKDYNTFtnRs"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-CreateContactLambdaFunctionQualifiedArn"
      }
    },
    "GetContactLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetContactLambdaVersion5s7rUTbtBCwGb03UA23Q4fAGGFuJHWu0WB1R88xytU"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetContactLambdaFunctionQualifiedArn"
      }
    },
    "UpdateContactLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateContactLambdaVersionMxs4P1j1oGmAYSP48efLFALeFyUqRsFbhXJY1zgk364"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-UpdateContactLambdaFunctionQualifiedArn"
      }
    },
    "DeleteContactLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteContactLambdaVersiontKxkSlDXZmvqVZtgudvQ3Tn8g2DI1C9xqq8BjYHNc"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-DeleteContactLambdaFunctionQualifiedArn"
      }
    },
    "GetClientsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetClientsLambdaVersion7cdGnUB9Ll9R3lqGfi68EfB4q4L48uUDEGmb4bWbdg"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-GetClientsLambdaFunctionQualifiedArn"
      }
    },
    "CreateClientLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateClientLambdaVersionIG6jQ59b6AwPDYvK7xqXr0AOXNCbjyT0ibHHPivvNw"
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-CreateClientLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-rigup-backend-dev-ServiceEndpoint"
      }
    }
  }
}